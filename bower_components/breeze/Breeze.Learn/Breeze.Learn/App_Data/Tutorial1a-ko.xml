<Tutorial>
  <Order>1</Order>
  <Title>Tutorial 1 - Queries - w/Knockout</Title>
  <Moniker>Queries</Moniker>
  <Description>Shows how to compose basic Breeze queries</Description>
  <Steps>
    <TutorialStep>
      <Instructions>
        <![CDATA[        
This tutorial guides you through some of *Breeze's* basic capabilities with an emphasis on querying data. Knockout.js is used within this tutorial to handle data-binding and render html. 

### How does it work?
Follow the instructions in this top left panel, enter your JavaScript in the top right panel, click "Run" in the lower left output panel and see the results. <a href="http://www.breezejs.com/live-tutorial-overview" target="_blank" title="Live Tutorial Overview">Learn more here</a>.

### Let's go!
Click the **Run** button in the box below.

You should see a list of employee names appear in the *Output* pane below.

Now, let's try and make this query a bit more complicated by ordering the results.  In *Breeze* we do this by adding an "orderBy" clause to a query.

Let's try this by adding the following clause to the bottom of the query in the *JavaScript* panel.

>         .orderBy("LastName");

The query should now look like this:

>     var query = new breeze.EntityQuery()
>         .from("Employees")
>         .orderBy("LastName");

and then press **Run**.

At this point you should see the same "Employees" as before, except that now they should all be sorted by "LastName".
]]>
      </Instructions>
      <StartingJavascript>
        <![CDATA[
var manager = new breeze.EntityManager('breeze/northwind');

var query = new breeze.EntityQuery()
    .from("Employees");
    
manager.executeQuery(query).then(function(data){
    ko.applyBindings(data);
}).fail(function(e) {
    alert(e);  
});
]]>
      </StartingJavascript>
      <StartingHtml>
        <![CDATA[
<p data-bind="visible: !results">Fetching data ... </p>
<ul data-bind="foreach: results, visible: results" style="display:none">
  <li>
    <span data-bind="text:FirstName"></span>
    <span data-bind="text:LastName"></span>
  </li>
</ul>
]]>
      </StartingHtml>
    </TutorialStep>
    <TutorialStep>
      <Instructions>
        <![CDATA[        
When we execute a query in *Breeze*, we are actually making an asynchronous call to the server for a set of data.  Processing the results for this type of operation is commonly handled
in JavaScript via a callback function.  *Breeze* query execution supports both callbacks as well as something called "Promises".  A promise, 
like a callback, is the code that will execute when the query finally returns data to the client. In the "executeQuery" call, shown on the right, the code in the "then" block is 
the "Promise". 

>      .then(function(data) { ..... })

The "function(data) {...}" is the code that will actually execute when the query completes.  The "data" that is passed into this function is the server's response to this query.  The "data"
parameter in turn has a "results" property that contains the list of "entities" that make up the results to this query. 

> *There are several other properties that make up the "data" result. These are all described in the Breeze API documentation.*

But for now, let's try adding a filter to this query.

To accomplish this, simply add the following "where" clause to the bottom of the query in the "JavaScript" panel:

>     .where("LastName", "startsWith", "P");

The query should now look like this:

>     var query = new breeze.EntityQuery()
>       .from("Employees")
>       .orderBy("LastName")
>       .where("LastName", "startsWith", "P");

Now press 'Run'.

At this point, you should only see two "Employee" both of whose last names begin with the letter "P". 

The "orderBy" clause in this query could have gone either before or after the "where" clause.  *Breeze* doesn't care about the order in which a query is built up. 
]]>
      </Instructions>
      <StartingJavascript>
        <![CDATA[
  
var manager = new breeze.EntityManager('breeze/northwind');

var query = new breeze.EntityQuery()
    .from("Employees")
    .orderBy("LastName");
    
manager.executeQuery(query).then(function(data){
    ko.applyBindings(data);
}).fail(function(e) {
    alert(e);  
});
]]>
      </StartingJavascript>
      <StartingHtml></StartingHtml>
    </TutorialStep>
    <TutorialStep>
      <Instructions>
        <![CDATA[
The *where* clause that you just added consists of three parts,

- A property name
- A filter operator
- A value

The **property name** is the name of one of the properties on the *type* that is declared in the *.from* method. Since our query started with
      
        .from("Employees")

we know that we can use any property of the "Employee" type. We will investigate more of the "Employee" type later.

The **filter operator** may be any of the following

- "gt" or ">"
- "lt" or "<"
- "eq" or "=="
- "ge" or ">="
- "le" or "<="
- "ne" or "!="
- "startsWith"
- "endsWith"
- "contains" or "substringof"

So all of the following are valid query clauses, provided that the entity type contains the specified properties.

>     .where("Qty", ">", 7);
>     .where("IsCompleted", "eq" , true);
>     .where("LastName", "startsWith", "P");

> *Don't worry about getting your casing correct with these - "startsWith", "STARTSWith" and "startswith" all work. *

These operators can also be expressed using one of the static properties of the **FilterQueryOptions** class. These are:

- FilterQueryOp.GreaterThan
- FilterQueryOp.LessThan
- FilterQueryOp.Equals
- FilterQueryOp.GreaterThanOrEqual
- FilterQueryOp.LessThanOrEqual
- FilterQueryOp.NotEquals
- FilterQueryOp.StartsWith
- FilterQueryOp.EndsWith
- FilterQueryOp.Contains

So the query fragments above can also be expressed as

>     var op = breeze.FilterQueryOp;

>     .where("Qty", op.GreaterThan, 7);
>     .where("IsCompleted", op.Equals , true);
>     .where("LastName", op.StartsWith, "P");

Let's try using a few of these query fragments.

First, let's change 

>     .where("LastName", "startsWith", "P");

to

>     .where("EmployeeID", ">", 4);

and press **Run**.  

You should have seen 5 employees show up.  Now lets try changing 

>     .where("EmployeeID", ">", 4);

to
  
>     .where("BirthDate", "lt", new Date(50, 9, 12));

and press **Run**.  Only two employees should be left with this filter.

]]>
      </Instructions>
      <StartingJavascript>
        <![CDATA[  
var manager = new breeze.EntityManager('breeze/northwind');

var query = new breeze.EntityQuery()
    .from("Employees")
    .orderBy("LastName")
    .where("LastName", "startsWith", "P");
    
manager.executeQuery(query).then(function(data){
    ko.applyBindings(data);
}).fail(function(e) {
    alert(e);  
});
]]>
      </StartingJavascript>
      <StartingHtml></StartingHtml>
    </TutorialStep>
    // 4
    <TutorialStep>
      <Instructions>
        <![CDATA[
The next obvious problem is how to combine query clauses to create a "composite" query. 

In order to demonstrate this, we are going to start by querying a different, somewhat larger, collection on the server.

First, Let's change the query in the *JavaScript* panel from using "Employees"

>      .from("Employees")
>      .orderBy("LastName")
       .where("BirthDate", "lt", new Date(50, 9, 12));

to "Customers"

>      .from("Customers");

Now we also need to change the *Html* to show "Customer" information instead of "Employee" information.

This involves editing the Html and changing.

>     <span data-bind="text:FirstName"></span>
>     <span data-bind="text:LastName"></span>

to this

>     <span data-bind="text:CompanyName"></span>
>     in
>     <span data-bind="text:City"></span>

and press 'Run'.

You should now see a rather long list of company names, long enough that you need to scroll in order to see them all.
]]>
      </Instructions>
      <StartingJavascript>
        <![CDATA[
var manager = new breeze.EntityManager('breeze/northwind');

var query = new breeze.EntityQuery()
    .from("Employees")
    .orderBy("LastName")
    .where("BirthDate", "lt", new Date(50, 9, 12));
    
manager.executeQuery(query).then(function(data){
    ko.applyBindings(data);
}).fail(function(e) {
    alert(e);  
});
]]>
      </StartingJavascript>
      <StartingHtml></StartingHtml>
    </TutorialStep>
    // 5
    <TutorialStep>
      <Instructions>
        <![CDATA[
Now let's try to filter this list by adding multiple "where" clauses.

To accomplish this we create a *Predicate* that can be used in place of the "where" clause we learned earlier.

This works because every "where" clause is actually converted to a "Predicate" before it is executed.  So in this next step we
are simply going to create a *Predicate* directly.

First, change this query

>     var query = new breeze.EntityQuery()
>         .from("Customers");

to 

>     var Predicate = breeze.Predicate;
>     var p1 = Predicate.create("CompanyName", "startsWith", "S");
>     var p2 = Predicate.create("City", "contains", "er");
>     var whereClause = p1.and(p2);
>
>     var query = new breeze.EntityQuery()
>         .from("Customers")
>         .where(whereClause);

and press **Run**.

We should now only see customers with company names that start with "S" that are also in cities whose names contain "er".
]]>
      </Instructions>
      <StartingJavascript>
        <![CDATA[
var manager = new breeze.EntityManager('breeze/northwind');

var query = new breeze.EntityQuery()
    .from("Customers");
    
manager.executeQuery(query).then(function(data){
    ko.applyBindings(data);
}).fail(function(e) {
    alert(e);  
});
]]>
      </StartingJavascript>
      <StartingHtml>
        <![CDATA[
<p data-bind="visible: !results">Fetching data ... </p>        
<ul data-bind="foreach: results, visible: results" style="display:none">
  <li>
    <span data-bind="text:CompanyName"></span>
     in 
    <span data-bind="text:City"></span>
  </li>
</ul>
]]>
      </StartingHtml>
    </TutorialStep>
    // 6
    <TutorialStep>
      <Instructions>
        <![CDATA[
Another way to restrict the list is to specify that we only want the first few customers instead of all of them.

To accomplish this, let's change the query to only give us the first 5 customers.

>     var query = new breeze.EntityQuery()
>         .from("Customers")
>         .take(5);

and press **Run**.

We should now see only the first 5 customer names.

*Breeze* also supports a *skip* operator and we can therefore perform paging operations by combining
the *skip*, *take*, and *orderBy* operators.  

To see this, replace the query with this new query.

>     var pageSize = 5;
>     var pageNum = 3;
>     var query = new breeze.EntityQuery()
>         .from("Customers")
>         .orderBy("CompanyName")
>         .skip(pageSize*(pageNum-1))
>         .take(pageSize);

and press **Run**.

This query is effectively returning the 3rd page of Customers, assuming a page size of 5. You can then change 
the "pageNum" variable above and rerun to see the effect of moving between pages. 

]]>
      </Instructions>
      <StartingJavascript>
        <![CDATA[   
var manager = new breeze.EntityManager('breeze/northwind');

var Predicate = breeze.Predicate;
var p1 = Predicate.create("CompanyName", "startsWith", "S");
var p2 = Predicate.create("City", "contains", "er");
var whereClause = p1.and(p2);

var query = new breeze.EntityQuery()
    .from("Customers")
    .where(whereClause);
    
manager.executeQuery(query).then(function(data){
    ko.applyBindings(data);
}).fail(function(e) {
    alert(e);  
});
]]>
      </StartingJavascript>
      <StartingHtml>
      </StartingHtml>
    </TutorialStep>
    // 7
    <TutorialStep>
      <Instructions>
        <![CDATA[
]]>
      </Instructions>
      <StartingJavascript>
        <![CDATA[
var manager = new breeze.EntityManager('breeze/northwind');

var pageSize = 5;
var pageNum = 3;
var query = new breeze.EntityQuery()
    .from("Customers")
    .orderBy("CompanyName")
    .skip(pageSize*(pageNum-1))
    .take(pageSize);
    
manager.executeQuery(query).then(function(data){
    ko.applyBindings(data);
}).fail(function(e) {
    alert(e);  
});
]]>
      </StartingJavascript>
      <StartingHtml>
        <![CDATA[
<p data-bind="visible: !results">Fetching data ... </p>        
<ul data-bind="foreach: results, visible: results" style="display:none">
  <li>
    <span data-bind="text:CompanyName"></span>
  </li>
</ul>
]]>
      </StartingHtml>
    </TutorialStep>
  </Steps>
</Tutorial>