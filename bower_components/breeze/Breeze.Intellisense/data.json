{
    "project": {
        "name": "The Breeze API",
        "description": "Client-Server data managment ... in JavaScript.",
        "version": "0.60",
        "url": "http://www.breezejs.com/",
        "logo": "http://www.ideablade.com/images/IdeaBladeBanner/IdeaBlade_logo_tm.png"
    },
    "files": {
        "core.js": {
            "name": "core.js",
            "modules": {
                "core": 1
            },
            "classes": {
                "config": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "dataType.js": {
            "name": "dataType.js",
            "modules": {},
            "classes": {
                "DataType": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "entityAspect.js": {
            "name": "entityAspect.js",
            "modules": {},
            "classes": {
                "EntityState": 1,
                "EntityAction": 1,
                "EntityAspect": 1,
                "EntityKey": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "entityManager.js": {
            "name": "entityManager.js",
            "modules": {},
            "classes": {
                "EntityManager": 1,
                "MergeStrategy": 1,
                "FetchStrategy": 1,
                "QueryOptions": 1,
                "SaveOptions": 1,
                "ValidationOptions": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "entityMetadata.js": {
            "name": "entityMetadata.js",
            "modules": {},
            "classes": {
                "NamingConvention": 1,
                "MetadataStore": 1,
                "EntityType": 1,
                "DataProperty": 1,
                "NavigationProperty": 1,
                "AutoGeneratedKeyType": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "entityModel.js": {
            "name": "entityModel.js",
            "modules": {
                "entityModel": 1
            },
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "entityQuery.js": {
            "name": "entityQuery.js",
            "modules": {},
            "classes": {
                "EntityQuery": 1,
                "FilterQueryOp": 1,
                "Predicate": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "enum.js": {
            "name": "enum.js",
            "modules": {},
            "classes": {
                "Enum": 1,
                "EnumSymbol": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "event.js": {
            "name": "event.js",
            "modules": {},
            "classes": {
                "Event": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "keyGenerator.js": {
            "name": "keyGenerator.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "keyGeneratorInterface.js": {
            "name": "keyGeneratorInterface.js",
            "modules": {},
            "classes": {
                "ↈ_keyGenerator_interface": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "promise.js": {
            "name": "promise.js",
            "modules": {},
            "classes": {
                "Promise": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "relationArray.js": {
            "name": "relationArray.js",
            "modules": {},
            "classes": {
                "ↈ_relationArray_": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "validate.js": {
            "name": "validate.js",
            "modules": {},
            "classes": {
                "Validator": 1,
                "ValidationError": 1
            },
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {
        "core": {
            "name": "core",
            "submodules": {},
            "classes": {
                "config": 1,
                "Enum": 1,
                "EnumSymbol": 1,
                "Event": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "main",
            "file": "event.js",
            "line": 14,
            "description": "Utility types and functions of generally global applicability.",
            "itemtype": "main"
        },
        "entityModel": {
            "name": "entityModel",
            "submodules": {},
            "classes": {
                "DataType": 1,
                "EntityState": 1,
                "EntityAction": 1,
                "EntityAspect": 1,
                "EntityKey": 1,
                "EntityManager": 1,
                "MergeStrategy": 1,
                "FetchStrategy": 1,
                "QueryOptions": 1,
                "SaveOptions": 1,
                "ValidationOptions": 1,
                "NamingConvention": 1,
                "MetadataStore": 1,
                "EntityType": 1,
                "DataProperty": 1,
                "NavigationProperty": 1,
                "AutoGeneratedKeyType": 1,
                "EntityQuery": 1,
                "FilterQueryOp": 1,
                "Predicate": 1,
                "ↈ_keyGenerator_interface": 1,
                "Promise": 1,
                "ↈ_relationArray_": 1,
                "Validator": 1,
                "ValidationError": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "main",
            "file": "validate.js",
            "line": 609,
            "description": "The entityModel namespace.",
            "itemtype": "main"
        }
    },
    "classes": {
        "config": {
            "name": "config",
            "shortname": "config",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "core",
            "namespace": "",
            "file": "core.js",
            "line": 20,
            "description": "A singleton object that is the repository of all entityModel specific configuration options.\n   \n    core.config.setProperties( {\n        trackingImplemenation: entityModel.entityTracking_ko,\n        remoteAccessImplementation: entityModel.remoteAccess_webApi\n    });"
        },
        "DataType": {
            "name": "DataType",
            "shortname": "DataType",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "entityModel",
            "namespace": "",
            "file": "dataType.js",
            "line": 11,
            "description": "DataType is an 'Enum' containing all of the supported data types.",
            "static": 1
        },
        "EntityState": {
            "name": "EntityState",
            "shortname": "EntityState",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "entityModel",
            "namespace": "",
            "file": "entityAspect.js",
            "line": 15,
            "description": "EntityState is an 'Enum' containing all of the valid states for an 'Entity'.",
            "static": 1
        },
        "EntityAction": {
            "name": "EntityAction",
            "shortname": "EntityAction",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "entityModel",
            "namespace": "",
            "file": "entityAspect.js",
            "line": 153,
            "description": "EntityAction is an 'Enum' containing all of the valid actions that can occur to an 'Entity'.",
            "static": 1
        },
        "EntityAspect": {
            "name": "EntityAspect",
            "shortname": "EntityAspect",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "entityModel",
            "namespace": "",
            "file": "entityAspect.js",
            "line": 282,
            "description": "An EntityAspect instance is associated with every attached entity and is accessed via the entity's 'entityAspect' property. \n\nThe EntityAspect itself provides properties to determine and modify the EntityState of the entity and has methods \nthat provide a variety of services including validation and change tracking.\n\nAn EntityAspect will almost never need to be constructed directly. You will usually get an EntityAspect by accessing\nan entities 'entityAspect' property.  This property will be automatically attached when an entity is created via either \na query, import or EntityManager.createEntity call.\n\n    // assume order is an order entity attached to an EntityManager.\n    var aspect = order.entityAspect;\n    var currentState = aspect.entityState;"
        },
        "EntityKey": {
            "name": "EntityKey",
            "shortname": "EntityKey",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "entityModel",
            "namespace": "",
            "file": "entityAspect.js",
            "line": 806,
            "description": "An EntityKey is an object that represents the unique identity of an entity.  EntityKey's are immutable."
        },
        "EntityManager": {
            "name": "EntityManager",
            "shortname": "EntityManager",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "entityModel",
            "namespace": "",
            "file": "entityManager.js",
            "line": 35,
            "description": "Instances of the EntityManager contain and manage collections of entities, either retrieved from a backend datastore or created on the client."
        },
        "MergeStrategy": {
            "name": "MergeStrategy",
            "shortname": "MergeStrategy",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "entityModel",
            "namespace": "",
            "file": "entityManager.js",
            "line": 1962,
            "description": "MergeStrategy is an 'Enum' that determines how entities are merged into an EntityManager.",
            "static": 1
        },
        "FetchStrategy": {
            "name": "FetchStrategy",
            "shortname": "FetchStrategy",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "entityModel",
            "namespace": "",
            "file": "entityManager.js",
            "line": 1991,
            "description": "FetchStrategy is an 'Enum' that determines how and where entities are retrieved from as a result of a query.",
            "static": 1
        },
        "QueryOptions": {
            "name": "QueryOptions",
            "shortname": "QueryOptions",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "entityModel",
            "namespace": "",
            "file": "entityManager.js",
            "line": 2016,
            "description": "A QueryOptions instance is used to specify the 'options' under which a query will occur."
        },
        "SaveOptions": {
            "name": "SaveOptions",
            "shortname": "SaveOptions",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "entityModel",
            "namespace": "",
            "file": "entityManager.js",
            "line": 2129,
            "description": "A SaveOptions instance is used to specify the 'options' under which a save will occur."
        },
        "ValidationOptions": {
            "name": "ValidationOptions",
            "shortname": "ValidationOptions",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "entityModel",
            "namespace": "",
            "file": "entityManager.js",
            "line": 2177,
            "description": "A ValidationOptions instance is used to specify the conditions under which validation will be executed."
        },
        "NamingConvention": {
            "name": "NamingConvention",
            "shortname": "NamingConvention",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "entityModel",
            "namespace": "",
            "file": "entityMetadata.js",
            "line": 26,
            "description": "A NamingConvention instance is used to specify the naming conventions under which a MetadataStore \nwill translate property names between the server and the javascript client. \n\nThe default NamingConvention does not perform any translation, it simply passes property names thru unchanged."
        },
        "MetadataStore": {
            "name": "MetadataStore",
            "shortname": "MetadataStore",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "entityModel",
            "namespace": "",
            "file": "entityMetadata.js",
            "line": 126,
            "description": "An instance of the MetadataStore contains all of the metadata about a collection of {{#crossLink \"EntityType\"}}{{/crossLink}}'s.\nMetadataStores may be shared across {{#crossLink \"EntityManager\"}}{{/crossLink}}'s.  If an EntityManager is created without an\nexplicit MetadataStore, the MetadataStore from the MetadataStore.defaultInstance property will be used."
        },
        "EntityType": {
            "name": "EntityType",
            "shortname": "EntityType",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "entityModel",
            "namespace": "",
            "file": "entityMetadata.js",
            "line": 769,
            "description": "Container for all of the metadata about a specific type of Entity."
        },
        "DataProperty": {
            "name": "DataProperty",
            "shortname": "DataProperty",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "entityModel",
            "namespace": "",
            "file": "entityMetadata.js",
            "line": 1337,
            "description": "A DataProperty describes the metadata for a single property of an  {{#crossLink \"EntityType\"}}{{/crossLink}} that contains simple data. \n\nInstances of the DataProperty class are constructed automatically during Metadata retrieval. However it is also possible to construct them\ndirectly via the constructor."
        },
        "NavigationProperty": {
            "name": "NavigationProperty",
            "shortname": "NavigationProperty",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "entityModel",
            "namespace": "",
            "file": "entityMetadata.js",
            "line": 1549,
            "description": "A NavigationProperty describes the metadata for a single property of an  {{#crossLink \"EntityType\"}}{{/crossLink}} that return instances of other EntityTypes. \n    \nInstances of the NavigationProperty class are constructed automatically during Metadata retrieval.   However it is also possible to construct them\ndirectly via the constructor."
        },
        "AutoGeneratedKeyType": {
            "name": "AutoGeneratedKeyType",
            "shortname": "AutoGeneratedKeyType",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "entityModel",
            "namespace": "",
            "file": "entityMetadata.js",
            "line": 1851,
            "description": "AutoGeneratedKeyType is an 'Enum' containing all of the valid states for an automatically generated key.",
            "static": 1,
            "final": 1
        },
        "EntityQuery": {
            "name": "EntityQuery",
            "shortname": "EntityQuery",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "entityModel",
            "namespace": "",
            "file": "entityQuery.js",
            "line": 20,
            "description": "An EntityQuery instance is used to query entities either from a remote datasource or from a local {{#crossLink \"EntityManager\"}}{{/crossLink}}. \n\nEntityQueries are immutable - this means that all EntityQuery methods that return an EntityQuery actually create a new EntityQuery.  This means that \nEntityQueries can be 'modified' without affecting any current instances."
        },
        "FilterQueryOp": {
            "name": "FilterQueryOp",
            "shortname": "FilterQueryOp",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "entityModel",
            "namespace": "",
            "file": "entityQuery.js",
            "line": 1003,
            "description": "FilterQueryOp is an 'Enum' containing all of the valid  {{#crossLink \"Predicate\"}}{{/crossLink}} \nfilter operators for an {{#crossLink \"EntityQuery\"}}{{/crossLink}}.",
            "static": 1
        },
        "Predicate": {
            "name": "Predicate",
            "shortname": "Predicate",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "entityModel",
            "namespace": "",
            "file": "entityQuery.js",
            "line": 1128,
            "description": "Used to define a 'where' predicate for an EntityQuery.  Predicates are immutable, which means that any\nmethod that would modify a Predicate actually returns a new Predicate."
        },
        "Enum": {
            "name": "Enum",
            "shortname": "Enum",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "core",
            "namespace": "",
            "file": "enum.js",
            "line": 13,
            "description": "Base class for all Breeze enumerations, such as EntityState, DataType, FetchStrategy, MergeStrategy etc.\nA Breeze Enum is a namespaced set of constant values.  Each Enum consists of a group of related constants, called 'symbols'.\nUnlike enums in some other environments, each 'symbol' can have both methods and properties.\nSee the example below:\n\n    // Example of creating a new Enum\n    var prototype = {\n        nextDay: function () {\n            var nextIndex = (this.dayIndex+1) % 7;\n            return DayOfWeek.getSymbols()[nextIndex];\n        }\n    };\n\n    var DayOfWeek = new Enum(\"DayOfWeek\", prototype);\n    DayOfWeek.Monday    = DayOfWeek.addSymbol( { dayIndex: 0 });\n    DayOfWeek.Tuesday   = DayOfWeek.addSymbol( { dayIndex: 1 });\n    DayOfWeek.Wednesday = DayOfWeek.addSymbol( { dayIndex: 2 });\n    DayOfWeek.Thursday  = DayOfWeek.addSymbol( { dayIndex: 3 });\n    DayOfWeek.Friday    = DayOfWeek.addSymbol( { dayIndex: 4 });\n    DayOfWeek.Saturday  = DayOfWeek.addSymbol( { dayIndex: 5, isWeekend: true });\n    DayOfWeek.Sunday    = DayOfWeek.addSymbol( { dayIndex: 6, isWeekend: true });\n    DayOfWeek.seal();\n\n    // custom methods\n    ok(DayOfWeek.Monday.nextDay() === DayOfWeek.Tuesday);\n    ok(DayOfWeek.Sunday.nextDay() === DayOfWeek.Monday);\n    // custom properties\n    ok(DayOfWeek.Tuesday.isWeekend === undefined);\n    ok(DayOfWeek.Saturday.isWeekend == true);\n    // Standard enum capabilities\n    ok(DayOfWeek instanceof Enum);\n    ok(Enum.isSymbol(DayOfWeek.Wednesday));\n    ok(DayOfWeek.contains(DayOfWeek.Thursday));\n    ok(DayOfWeek.Tuesday.parentEnum == DayOfWeek);\n    ok(DayOfWeek.getSymbols().length === 7);\n    ok(DayOfWeek.Friday.toString() === \"Friday\");"
        },
        "EnumSymbol": {
            "name": "EnumSymbol",
            "shortname": "EnumSymbol",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "core",
            "namespace": "",
            "file": "enum.js",
            "line": 213,
            "description": "One of the constant values that is generated by the {{#crossLink \"Enum\"}}{{/crossLink}} \"addSymbol\" method.  EnumSymbols should ONLY be created via\nthe Enum.addSymbol method.\n\n     var DayOfWeek = new Enum(\"DayOfWeek\");\n     DayOfWeek.Monday    = DayOfWeek.addSymbol();"
        },
        "Event": {
            "name": "Event",
            "shortname": "Event",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "core",
            "namespace": "",
            "file": "event.js",
            "line": 14,
            "description": "Class to support basic event publication and subscription semantics."
        },
        "ↈ_keyGenerator_interface": {
            "name": "ↈ_keyGenerator_interface",
            "shortname": "ↈ_keyGenerator_interface",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "entityModel",
            "namespace": "",
            "file": "keyGeneratorInterface.js",
            "line": 5,
            "description": "This is an interface description. Any class that implements the methods and properties defined here is considered a valid\nimplementation of this interface.\n\nEach EntityManager can have a single KeyGenerator implementation that it will use to manage the generation of all 'temporary' keys.\n\nA KeyGenerator implementation is assigned to an EntityManager via the {{#crossLink \"EntityManager/setProperties\"}}{{/crossLink}} \nmethod with a config parameter of 'keyGeneratorCtor'. \n\n    MyKeyGenerator = function() { \n        // your code here\n    }\n    MyKeyGenerator.prototype.generateTempKeyValue = function(entityType) {\n        // your implementation here.\n    }\n    em.setProperties( {keyGeneratorCtor: MyKeyGenerator });\nThe assigned KeyGenerator is then called whenever the \nEntityManager.generateTempKeyValue method is called.  The EntityManager internally keeps track of all of the generated keys\nand handles all of the mapping of these temporary keys to real keys after any save.  \n\nThe KeyGenerator implementation only needs to do one thing.  Return a unique key value of the correct datatype for each \ncall to the generateTempKeyValue method.  Note, that KeyGeneration is NOT supported for multipart keys.  \n\nIf no KeyGenerator is supplied, a default KeyGenerator will be automatically provided."
        },
        "Promise": {
            "name": "Promise",
            "shortname": "Promise",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "entityModel",
            "namespace": "",
            "file": "promise.js",
            "line": 5,
            "description": "This is an simply api documentation for the CommonJS A Promises specification as it is used within Breeze."
        },
        "ↈ_relationArray_": {
            "name": "ↈ_relationArray_",
            "shortname": "ↈ_relationArray_",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "entityModel",
            "namespace": "",
            "file": "relationArray.js",
            "line": 12,
            "description": "Relation arrays are not actually classes, they are objects that mimic arrays. A relation array is collection of \nentities associated with a navigation property on a single entity. i.e. customer.orders or order.orderDetails.\nThis collection looks like an array in that the basic methods on arrays such as 'push', 'pop', 'shift', 'unshift', 'splice'\nare all provided as well as several special purpose methods."
        },
        "Validator": {
            "name": "Validator",
            "shortname": "Validator",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "entityModel",
            "namespace": "",
            "file": "validate.js",
            "line": 32,
            "description": "Instances of the Validator class provide the logic to validate another object and provide a description of any errors\nencountered during the validation process.  They are typically associated with a 'validators' property on the following types: {{#crossLink \"EntityType\"}}{{/crossLink}}, \n{{#crossLink \"DataProperty\"}}{{/crossLink}} or {{#crossLink \"NavigationProperty\"}}{{/crossLink}}.\n\nA number of property level validators are registered automatically, i.e added to each DataProperty.validators property \nbased on {{#crossLink \"DataProperty\"}}{{/crossLink}} metadata.  For example, \n\n- DataProperty.dataType -> one of the 'dataType' validator methods such as Validator.int64, Validator.date, Validator.bool etc.\n- DataProperty.maxLength -> Validator.maxLength \n- DataProperty.isNullable -> Validator.required (if not nullable)"
        },
        "ValidationError": {
            "name": "ValidationError",
            "shortname": "ValidationError",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "entityModel",
            "namespace": "",
            "file": "validate.js",
            "line": 609,
            "description": "A ValidatationError is used to describe a failed validation."
        }
    },
    "classitems": [
        {
            "file": "core.js",
            "line": 31,
            "description": "The implementation currently in use for tracking entities",
            "example": [
                "\n    var name = entityModel.trackingImplementation.name;\nThere are currently two implementations of this interface.",
                "\n    // For knockout.js\n    core.config.setProperties( {\n        trackingImplementation: entityModel.entityTracking_ko \n    });\nor",
                "\n    // Generic js implementation of observability\n    core.config.setProperties( {\n        trackingImplementation: entityModel.entityTracking_backingStore\n    });"
            ],
            "itemtype": "property",
            "name": "trackingImplementation",
            "type": "~entityTracking-interface",
            "class": "config",
            "module": "core"
        },
        {
            "file": "core.js",
            "line": 51,
            "description": "The implementation currently in use for communicating with a remote server and service.",
            "example": [
                "\n    var name = entityModel.remoteAccessImplementation.name;\nThere are currently two implementations of this interface.\nEither an implementation of the remoteAccess interface that supports ASP.NET Web Api services.",
                "\n    core.config.setProperties( {\n        remoteAccessImplementation: entityModel.remoteAccess_webApi\n    });\nor an implementation of the remoteAccess interface that supports OData services.",
                "\n    core.config.setProperties( {\n        remoteAccessImplementation: entityModel.remoteAccess_odata\n    });    "
            ],
            "itemtype": "property",
            "name": "remoteAccessImplementation",
            "type": "~remoteAccess-interface",
            "class": "config",
            "module": "core"
        },
        {
            "file": "core.js",
            "line": 69,
            "itemtype": "method",
            "name": "setProperties",
            "params": [
                {
                    "name": "config",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "remoteAccessImplementation",
                            "description": "",
                            "type": "Implementation of ~remoteAccess-interface",
                            "optional": true
                        },
                        {
                            "name": "trackingImplementation",
                            "description": "",
                            "type": "Implementation of ~entityTracking-interface",
                            "optional": true
                        }
                    ]
                }
            ],
            "class": "config",
            "module": "core"
        },
        {
            "file": "dataType.js",
            "line": 18,
            "description": "The default value of this DataType.",
            "itemtype": "property",
            "name": "defaultValue",
            "type": "Any",
            "class": "DataType",
            "module": "entityModel"
        },
        {
            "file": "dataType.js",
            "line": 23,
            "description": "Whether this is a 'numeric' DataType.",
            "itemtype": "property",
            "name": "isNumeric",
            "type": "Boolean",
            "class": "DataType",
            "module": "entityModel"
        },
        {
            "file": "dataType.js",
            "line": 33,
            "itemtype": "property",
            "name": "String",
            "type": "DataType",
            "final": 1,
            "static": 1,
            "class": "DataType",
            "module": "entityModel"
        },
        {
            "file": "dataType.js",
            "line": 39,
            "itemtype": "property",
            "name": "Int64",
            "type": "DataType",
            "final": 1,
            "static": 1,
            "class": "DataType",
            "module": "entityModel"
        },
        {
            "file": "dataType.js",
            "line": 45,
            "itemtype": "property",
            "name": "Int32",
            "type": "DataType",
            "final": 1,
            "static": 1,
            "class": "DataType",
            "module": "entityModel"
        },
        {
            "file": "dataType.js",
            "line": 51,
            "itemtype": "property",
            "name": "Int16",
            "type": "DataType",
            "final": 1,
            "static": 1,
            "class": "DataType",
            "module": "entityModel"
        },
        {
            "file": "dataType.js",
            "line": 57,
            "itemtype": "property",
            "name": "Decimal",
            "type": "DataType",
            "final": 1,
            "static": 1,
            "class": "DataType",
            "module": "entityModel"
        },
        {
            "file": "dataType.js",
            "line": 63,
            "itemtype": "property",
            "name": "Double",
            "type": "DataType",
            "final": 1,
            "static": 1,
            "class": "DataType",
            "module": "entityModel"
        },
        {
            "file": "dataType.js",
            "line": 69,
            "itemtype": "property",
            "name": "Single",
            "type": "DataType",
            "final": 1,
            "static": 1,
            "class": "DataType",
            "module": "entityModel"
        },
        {
            "file": "dataType.js",
            "line": 75,
            "itemtype": "property",
            "name": "DateTime",
            "type": "DataType",
            "final": 1,
            "static": 1,
            "class": "DataType",
            "module": "entityModel"
        },
        {
            "file": "dataType.js",
            "line": 81,
            "itemtype": "property",
            "name": "Boolean",
            "type": "DataType",
            "final": 1,
            "static": 1,
            "class": "DataType",
            "module": "entityModel"
        },
        {
            "file": "dataType.js",
            "line": 87,
            "itemtype": "property",
            "name": "Guid",
            "type": "DataType",
            "final": 1,
            "static": 1,
            "class": "DataType",
            "module": "entityModel"
        },
        {
            "file": "dataType.js",
            "line": 93,
            "itemtype": "property",
            "name": "Byte",
            "type": "DataType",
            "final": 1,
            "static": 1,
            "class": "DataType",
            "module": "entityModel"
        },
        {
            "file": "dataType.js",
            "line": 99,
            "itemtype": "property",
            "name": "Binary",
            "type": "DataType",
            "final": 1,
            "static": 1,
            "class": "DataType",
            "module": "entityModel"
        },
        {
            "file": "dataType.js",
            "line": 105,
            "itemtype": "property",
            "name": "Undefined",
            "type": "DataType",
            "final": 1,
            "static": 1,
            "class": "DataType",
            "module": "entityModel"
        },
        {
            "file": "dataType.js",
            "line": 116,
            "description": "Returns the DataType for a specified type name.",
            "itemtype": "method",
            "name": "toDataType",
            "static": 1,
            "params": [
                {
                    "name": "typeName",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "A DataType.",
                "type": "DataType"
            },
            "class": "DataType",
            "module": "entityModel"
        },
        {
            "file": "entityAspect.js",
            "line": 22,
            "example": [
                "\n    var es = anEntity.entityAspect.entityState;\n    return es.isUnchanged();\nis the same as",
                "\n    return es === EntityState.Unchanged;"
            ],
            "itemtype": "method",
            "name": "isUnchanged",
            "return": {
                "description": "Whether an entityState instance is EntityState.Unchanged.",
                "type": "Boolean"
            },
            "class": "EntityState",
            "module": "entityModel"
        },
        {
            "file": "entityAspect.js",
            "line": 33,
            "example": [
                "\n    var es = anEntity.entityAspect.entityState;\n    return es.isAdded();\nis the same as",
                "\n    return es === EntityState.Added;"
            ],
            "itemtype": "method",
            "name": "isAdded",
            "return": {
                "description": "Whether an entityState instance is EntityState.Added.",
                "type": "Boolean"
            },
            "class": "EntityState",
            "module": "entityModel"
        },
        {
            "file": "entityAspect.js",
            "line": 44,
            "example": [
                "\n    var es = anEntity.entityAspect.entityState;\n    return es.isModified();\nis the same as",
                "\n    return es === EntityState.Modified;"
            ],
            "itemtype": "method",
            "name": "isModified",
            "return": {
                "description": "Whether an entityState instance is EntityState.Modified.",
                "type": "Boolean"
            },
            "class": "EntityState",
            "module": "entityModel"
        },
        {
            "file": "entityAspect.js",
            "line": 55,
            "example": [
                "\n    var es = anEntity.entityAspect.entityState;\n    return es.isDeleted();\nis the same as",
                "\n    return es === EntityState.Deleted;"
            ],
            "itemtype": "method",
            "name": "isDeleted",
            "return": {
                "description": "Whether an entityState instance is EntityState.Deleted.",
                "type": "Boolean"
            },
            "class": "EntityState",
            "module": "entityModel"
        },
        {
            "file": "entityAspect.js",
            "line": 66,
            "example": [
                "\n    var es = anEntity.entityAspect.entityState;\n    return es.isDetached();\nis the same as",
                "\n    return es === EntityState.Detached;"
            ],
            "itemtype": "method",
            "name": "isDetached",
            "return": {
                "description": "Whether an entityState instance is EntityState.Detached.",
                "type": "Boolean"
            },
            "class": "EntityState",
            "module": "entityModel"
        },
        {
            "file": "entityAspect.js",
            "line": 77,
            "example": [
                "\n    var es = anEntity.entityAspect.entityState;\n    return es.isUnchangedOrModified();\nis the same as",
                "\n    return es === EntityState.Unchanged || es === EntityState.Modified"
            ],
            "itemtype": "method",
            "name": "isUnchangedOrModified",
            "return": {
                "description": "Whether an entityState instance is EntityState.Unchanged or EntityState.Modified.",
                "type": "Boolean"
            },
            "class": "EntityState",
            "module": "entityModel"
        },
        {
            "file": "entityAspect.js",
            "line": 90,
            "example": [
                "\n    var es = anEntity.entityAspect.entityState;\n    return es.isAddedModifiedOrDeleted();\nis the same as",
                "\n    return es === EntityState.Added || es === EntityState.Modified || es === EntityState.Deleted"
            ],
            "itemtype": "method",
            "name": "isAddedModifiedOrDeleted",
            "return": {
                "description": "Whether an entityState instance is EntityState.Unchanged or EntityState.Modified or EntityState.Deleted.",
                "type": "Boolean"
            },
            "class": "EntityState",
            "module": "entityModel"
        },
        {
            "file": "entityAspect.js",
            "line": 108,
            "description": "The 'Unchanged' state.",
            "itemtype": "property",
            "name": "Unchanged",
            "type": "EntityState",
            "final": 1,
            "static": 1,
            "class": "EntityState",
            "module": "entityModel"
        },
        {
            "file": "entityAspect.js",
            "line": 116,
            "description": "The 'Added' state.",
            "itemtype": "property",
            "name": "Added",
            "type": "EntityState",
            "final": 1,
            "static": 1,
            "class": "EntityState",
            "module": "entityModel"
        },
        {
            "file": "entityAspect.js",
            "line": 124,
            "description": "The 'Modified' state.",
            "itemtype": "property",
            "name": "Modified",
            "type": "EntityState",
            "final": 1,
            "static": 1,
            "class": "EntityState",
            "module": "entityModel"
        },
        {
            "file": "entityAspect.js",
            "line": 132,
            "description": "The 'Deleted' state.",
            "itemtype": "property",
            "name": "Deleted",
            "type": "EntityState",
            "final": 1,
            "static": 1,
            "class": "EntityState",
            "module": "entityModel"
        },
        {
            "file": "entityAspect.js",
            "line": 140,
            "description": "The 'Detached' state.",
            "itemtype": "property",
            "name": "Detached",
            "type": "EntityState",
            "final": 1,
            "static": 1,
            "class": "EntityState",
            "module": "entityModel"
        },
        {
            "file": "entityAspect.js",
            "line": 167,
            "description": "Attach - Entity was attached via an AttachEntity call.",
            "itemtype": "property",
            "name": "Attach",
            "type": "EntityAction",
            "final": 1,
            "static": 1,
            "class": "EntityAction",
            "module": "entityModel"
        },
        {
            "file": "entityAspect.js",
            "line": 176,
            "description": "AttachOnQuery - Entity was attached as a result of a query.",
            "itemtype": "property",
            "name": "AttachOnQuery",
            "type": "EntityAction",
            "final": 1,
            "static": 1,
            "class": "EntityAction",
            "module": "entityModel"
        },
        {
            "file": "entityAspect.js",
            "line": 185,
            "description": "AttachOnImport - Entity was attached as a result of an import.",
            "itemtype": "property",
            "name": "AttachOnImport",
            "type": "EntityAction",
            "final": 1,
            "static": 1,
            "class": "EntityAction",
            "module": "entityModel"
        },
        {
            "file": "entityAspect.js",
            "line": 195,
            "description": "AttachOnQuery - Entity was detached.",
            "itemtype": "property",
            "name": "Detach",
            "type": "EntityAction",
            "final": 1,
            "static": 1,
            "class": "EntityAction",
            "module": "entityModel"
        },
        {
            "file": "entityAspect.js",
            "line": 204,
            "description": "MergeOnQuery - Properties on the entity were merged as a result of a query.",
            "itemtype": "property",
            "name": "MergeOnQuery",
            "type": "EntityAction",
            "final": 1,
            "static": 1,
            "class": "EntityAction",
            "module": "entityModel"
        },
        {
            "file": "entityAspect.js",
            "line": 213,
            "description": "MergeOnImport - Properties on the entity were merged as a result of an import.",
            "itemtype": "property",
            "name": "MergeOnImport",
            "type": "EntityAction",
            "final": 1,
            "static": 1,
            "class": "EntityAction",
            "module": "entityModel"
        },
        {
            "file": "entityAspect.js",
            "line": 222,
            "description": "MergeOnImport - Properties on the entity were merged as a result of a save",
            "itemtype": "property",
            "name": "MergeOnImport",
            "type": "EntityAction",
            "final": 1,
            "static": 1,
            "class": "EntityAction",
            "module": "entityModel"
        },
        {
            "file": "entityAspect.js",
            "line": 231,
            "description": "PropertyChange - A property on the entity was changed.",
            "itemtype": "property",
            "name": "PropertyChange",
            "type": "EntityAction",
            "final": 1,
            "static": 1,
            "class": "EntityAction",
            "module": "entityModel"
        },
        {
            "file": "entityAspect.js",
            "line": 240,
            "description": "EntityStateChange - The EntityState of the entity was changed.",
            "itemtype": "property",
            "name": "EntityStateChange",
            "type": "EntityAction",
            "final": 1,
            "static": 1,
            "class": "EntityAction",
            "module": "entityModel"
        },
        {
            "file": "entityAspect.js",
            "line": 250,
            "description": "AcceptChanges - AcceptChanges was called on the entity, or its entityState was set to Unmodified.",
            "itemtype": "property",
            "name": "AcceptChanges",
            "type": "EntityAction",
            "final": 1,
            "static": 1,
            "class": "EntityAction",
            "module": "entityModel"
        },
        {
            "file": "entityAspect.js",
            "line": 259,
            "description": "RejectChanges - RejectChanges was called on the entity.",
            "itemtype": "property",
            "name": "RejectChanges",
            "type": "EntityAction",
            "final": 1,
            "static": 1,
            "class": "EntityAction",
            "module": "entityModel"
        },
        {
            "file": "entityAspect.js",
            "line": 268,
            "description": "Clear - The EntityManager was cleared.  All entities detached.",
            "itemtype": "property",
            "name": "Clear",
            "type": "EntityAction",
            "final": 1,
            "static": 1,
            "class": "EntityAction",
            "module": "entityModel"
        },
        {
            "file": "entityAspect.js",
            "line": 356,
            "description": "The Entity that this aspect is associated with.\n\n__readOnly__",
            "itemtype": "property",
            "name": "entity",
            "type": "Entity",
            "class": "EntityAspect",
            "module": "entityModel"
        },
        {
            "file": "entityAspect.js",
            "line": 363,
            "description": "The {{#crossLink \"EntityManager\"}}{{/crossLink}} that contains this entity.\n\n__readOnly__",
            "itemtype": "property",
            "name": "entityManager",
            "type": "EntityManager",
            "class": "EntityAspect",
            "module": "entityModel"
        },
        {
            "file": "entityAspect.js",
            "line": 370,
            "description": "The {{#crossLink \"EntityState\"}}{{/crossLink}} of this entity.\n\n__readOnly__",
            "itemtype": "property",
            "name": "entityState",
            "type": "EntityState",
            "class": "EntityAspect",
            "module": "entityModel"
        },
        {
            "file": "entityAspect.js",
            "line": 377,
            "description": "Whether this entity is in the process of being saved.\n\n__readOnly__",
            "itemtype": "property",
            "name": "isBeingSaved",
            "type": "Boolean",
            "class": "EntityAspect",
            "module": "entityModel"
        },
        {
            "file": "entityAspect.js",
            "line": 384,
            "description": "The 'original values' of this entity where they are different from the 'current values'. \nThis is a map where the key is a property name and the value is the 'original value' of the property.\n\n__readOnly__",
            "itemtype": "property",
            "name": "originalValues",
            "type": "Object",
            "class": "EntityAspect",
            "module": "entityModel"
        },
        {
            "file": "entityAspect.js",
            "line": 392,
            "description": "An {{#crossLink \"Event\"}}{{/crossLink}} that fires whenever a value of one of this entity's properties change.",
            "example": [
                "\n    // assume order is an order entity attached to an EntityManager.\n    order.entityAspect.propertyChanged.subscribe(\n        function (propertyChangedArgs) {\n            // this code will be executed anytime a property value changes on the 'order' entity.\n            var entity = propertyChangedArgs.entity; // Note: entity === order\n            var propertyNameChanged = propertyChangedArgs.propertyName;\n            var oldValue = propertyChangedArgs.oldValue;\n            var newValue = propertyChangedArgs.newValue;\n        });"
            ],
            "itemtype": "event",
            "name": "propertyChanged",
            "params": [
                {
                    "name": "entity",
                    "description": "The entity whose property is changing.",
                    "type": "Entity"
                },
                {
                    "name": "propertyName",
                    "description": "The property that changed. This value will be 'null' for operations that replace the entire entity.  This includes\nqueries, imports and saves that require a merge. The remaining parameters will not exist in this case either.",
                    "type": "String"
                },
                {
                    "name": "oldValue",
                    "description": "The old value of this property before the change.",
                    "type": "Object"
                },
                {
                    "name": "newValue",
                    "description": "The new value of this property after the change.",
                    "type": "Object"
                }
            ],
            "readonly": "",
            "class": "EntityAspect",
            "module": "entityModel"
        },
        {
            "file": "entityAspect.js",
            "line": 413,
            "description": "An {{#crossLink \"Event\"}}{{/crossLink}} that fires whenever any of the validation errors on this entity change. \nNote that this might be the removal of an error when some data on the entity is fixed.",
            "example": [
                "\n    // assume order is an order entity attached to an EntityManager.\n    order.entityAspect.validationErrorsChanged.subscribe(\n        function (validationChangeArgs) {\n            // this code will be executed anytime a property value changes on the 'order' entity.\n            var entity == validationChangeArgs.entity; // Note: entity === order\n            var errorsAdded = validationChangeArgs.added;\n            var errorsCleared = validationChangeArgs.removed;\n        });"
            ],
            "itemtype": "event",
            "name": "validationErrorsChanged",
            "params": [
                {
                    "name": "entity",
                    "description": "The entity on which the validation errors are being added or removed.",
                    "type": "Entity"
                },
                {
                    "name": "added",
                    "description": "An array containing any newly added {{#crossLink \"ValidationError\"}}{{/crossLink}}s",
                    "type": "Array of ValidationError"
                },
                {
                    "name": "removed",
                    "description": "An array containing any newly removed {{#crossLink \"ValidationError\"}}{{/crossLink}}s. This is those\nerrors that have been 'fixed'",
                    "type": "Array of ValidationError"
                }
            ],
            "readonly": "",
            "class": "EntityAspect",
            "module": "entityModel"
        },
        {
            "file": "entityAspect.js",
            "line": 433,
            "description": "Returns the {{#crossLink \"EntityKey\"}}{{/crossLink}} for this Entity.",
            "example": [
                "\n     // assume order is an order entity attached to an EntityManager.\n    var entityKey = order.entityAspect.getKey();"
            ],
            "itemtype": "method",
            "name": "getKey",
            "params": [
                {
                    "name": "forceRefresh",
                    "description": "Forces the recalculation of the key.  This should normally be unnecessary.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "return": {
                "description": "The {{#crossLink \"EntityKey\"}}{{/crossLink}} associated with this Entity.",
                "type": "EntityKey"
            },
            "class": "EntityAspect",
            "module": "entityModel"
        },
        {
            "file": "entityAspect.js",
            "line": 455,
            "description": "Returns the entity to an {{#crossLink \"EntityState\"}}{{/crossLink}} of 'Unchanged' by committing all changes made since the entity was last queried \nhad 'acceptChanges' called on it.",
            "example": [
                "\n     // assume order is an order entity attached to an EntityManager.\n     order.entityAspect.acceptChanges();\n     // The 'order' entity will now be in an 'Unchanged' state with any changes committed."
            ],
            "itemtype": "method",
            "name": "acceptChanges",
            "class": "EntityAspect",
            "module": "entityModel"
        },
        {
            "file": "entityAspect.js",
            "line": 469,
            "description": "Returns the entity to an EntityState of 'Unchanged' by rejecting all changes made to it since the entity was last queried \nhad 'rejectChanges' called on it.",
            "example": [
                "\n     // assume order is an order entity attached to an EntityManager.\n     order.entityAspect.rejectChanges();\n     // The 'order' entity will now be in an 'Unchanged' state with any changes rejected. "
            ],
            "itemtype": "method",
            "name": "rejectChanges",
            "class": "EntityAspect",
            "module": "entityModel"
        },
        {
            "file": "entityAspect.js",
            "line": 492,
            "description": "Sets the entity to an EntityState of 'Unchanged'.  This is also the equivalent of calling {{#crossLink \"EntityAspect/acceptChanges\"}}{{/crossLink}}",
            "example": [
                "\n     // assume order is an order entity attached to an EntityManager.\n     order.entityAspect.setUnchanged();\n     // The 'order' entity will now be in an 'Unchanged' state with any changes committed."
            ],
            "itemtype": "method",
            "name": "setUnchanged",
            "class": "EntityAspect",
            "module": "entityModel"
        },
        {
            "file": "entityAspect.js",
            "line": 516,
            "description": "Sets the entity to an EntityState of 'Modified'.  This can also be achieved by changing the value of any property on an 'Unchanged' entity.",
            "example": [
                "\n    // assume order is an order entity attached to an EntityManager.\n    order.entityAspect.setModified();\n    // The 'order' entity will now be in a 'Modified' state. "
            ],
            "itemtype": "method",
            "name": "setModified",
            "class": "EntityAspect",
            "module": "entityModel"
        },
        {
            "file": "entityAspect.js",
            "line": 529,
            "description": "Sets the entity to an EntityState of 'Deleted'.  This both marks the entity as being scheduled for deletion during the next 'Save' call\nbut also removes the entity from all of its related entities.",
            "example": [
                "\n    // assume order is an order entity attached to an EntityManager.\n    order.entityAspect.setDeleted();\n    // The 'order' entity will now be in a 'Deleted' state and it will no longer have any 'related' entities. "
            ],
            "itemtype": "method",
            "name": "setDeleted",
            "class": "EntityAspect",
            "module": "entityModel"
        },
        {
            "file": "entityAspect.js",
            "line": 549,
            "description": "Performs validation on the entity, any errors encountered during the validation are available via the \n{{#crossLink \"EntityAspect.getValidationErrors\"}}{{/crossLink}} method. Validating an entity means executing\nall of the validators on both the entity itself as well as those on each of its properties.",
            "example": [
                "\n    // assume order is an order entity attached to an EntityManager.\n    var isOk = order.entityAspect.validateEntity();\n    // isOk will be 'true' if there are no errors on the entity.\n    if (!isOk) {\n        var errors = order.entityAspect.getValidationErrors();\n    }"
            ],
            "itemtype": "method",
            "name": "validateEntity",
            "return": {
                "description": "Whether the entity passed validation.",
                "type": "Boolean"
            },
            "class": "EntityAspect",
            "module": "entityModel"
        },
        {
            "file": "entityAspect.js",
            "line": 583,
            "description": "Performs validation on a specific property of this entity, any errors encountered during the validation are available via the \n{{#crossLink \"EntityAspect.getValidationErrors\"}}{{/crossLink}} method. Validating a property means executing\nall of the validators on the specified property.  This call is also made automatically anytime a property\nof an entity is changed.",
            "example": [
                "\n    // assume order is an order entity attached to an EntityManager.\n    var isOk = order.entityAspect.validateProperty(\"Order\"); \nor",
                "\n    var orderDateProperty = order.entityType.getProperty(\"OrderDate\");\n    var isOk = order.entityAspect.validateProperty(OrderDateProperty); "
            ],
            "itemtype": "method",
            "name": "validateProperty",
            "params": [
                {
                    "name": "property",
                    "description": "The {{#crossLink \"DataProperty\"}}{{/crossLink}} or \n{{#crossLink \"NavigationProperty\"}}{{/crossLink}} to validate.",
                    "type": "DataProperty|NavigationProperty"
                },
                {
                    "name": "context",
                    "description": "A context object used to pass additional information to each  {{#crossLink \"Validator\"}}{{/crossLink}}",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "Whether the entity passed validation.",
                "type": "Boolean"
            },
            "class": "EntityAspect",
            "module": "entityModel"
        },
        {
            "file": "entityAspect.js",
            "line": 611,
            "description": "Returns the validation errors associated with either the entire entity or any specified property.",
            "example": [
                "\nThis method can return all of the errors for an Entity",
                "\n    // assume order is an order entity attached to an EntityManager.\n    var valErrors = order.entityAspect.getValidationErrors();\nas well as those for just a specific property.",
                "\n    // assume order is an order entity attached to an EntityManager.\n    var orderDateErrors = order.entityAspect.getValidationErrors(\"OrderDate\");\nwhich can also be expressed as",
                "\n    // assume order is an order entity attached to an EntityManager.\n    var orderDateProperty = order.entityType.getProperty(\"OrderDate\");\n    var orderDateErrors = order.entityAspect.getValidationErrors(orderDateProperty);"
            ],
            "itemtype": "method",
            "name": "getValidationErrors",
            "params": [
                {
                    "name": "property",
                    "description": "The property for which validation errors should be retrieved.\nIf omitted, all of the validation errors for this entity will be returned.",
                    "type": "DataProperty|NavigationProperty",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "Array of ValidationError"
            },
            "class": "EntityAspect",
            "module": "entityModel"
        },
        {
            "file": "entityAspect.js",
            "line": 644,
            "description": "Adds a validation error for a specified property.",
            "itemtype": "method",
            "name": "addValidationError",
            "params": [
                {
                    "name": "validationError",
                    "description": "",
                    "type": "ValidationError"
                }
            ],
            "class": "EntityAspect",
            "module": "entityModel"
        },
        {
            "file": "entityAspect.js",
            "line": 656,
            "description": "Removes a validation error for a specified property.",
            "itemtype": "method",
            "name": "removeValidationError",
            "params": [
                {
                    "name": "validator",
                    "description": "",
                    "type": "Validator"
                },
                {
                    "name": "property",
                    "description": "",
                    "type": "DataProperty|NavigationProperty",
                    "optional": true
                }
            ],
            "class": "EntityAspect",
            "module": "entityModel"
        },
        {
            "file": "entityAspect.js",
            "line": 670,
            "description": "Performs a query for the value of a specified {{#crossLink \"NavigationProperty\"}}{{/crossLink}}.",
            "example": [
                "\n       emp.entityAspect.loadNavigationProperty(\"Orders\")\n        .then(function (data) {\n            var orders = data.results;\n        }).fail(function (exception) {\n            // handle exception here;\n        });"
            ],
            "itemtype": "method",
            "name": "loadNavigationProperty",
            "async": 1,
            "params": [
                {
                    "name": "navigationProperty",
                    "description": "The NavigationProperty to 'load'.",
                    "type": "NavigationProperty"
                },
                {
                    "name": "callback",
                    "description": "Function to call on success.",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "errorCallback",
                    "description": "Function to call on failure.",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "Promise"
            },
            "class": "EntityAspect",
            "module": "entityModel"
        },
        {
            "file": "entityAspect.js",
            "line": 812,
            "description": "Constructs a new EntityKey.  Each entity within an EntityManager will have a unique EntityKey.",
            "example": [
                "\n    // assume em1 is an EntityManager containing a number of existing entities.\n    var empType = em1.metadataStore.getEntityType(\"Employee\");\n    var entityKey = new EntityKey(empType, 1);\nEntityKey's may also be found by calling EntityAspect.getKey()",
                "\n    // assume employee1 is an existing Employee entity\n    var empKey = employee1.entityAspect.getKey();\nMultipart keys are created by passing an array as the 'keyValues' parameter",
                "\n    var empTerrType = em1.metadataStore.getEntityType(\"EmployeeTerritory\");            \n    var empTerrKey = new EntityKey(empTerrType, [ 1, 77]);\n    // The order of the properties in the 'keyValues' array must be the same as that \n    // returned by empTerrType.keyProperties"
            ],
            "itemtype": "method",
            "name": "<ctor> EntityKey",
            "params": [
                {
                    "name": "entityType",
                    "description": "The {{#crossLink \"EntityType\"}}{{/crossLink}} of the entity.",
                    "type": "EntityType"
                },
                {
                    "name": "keyValues",
                    "description": "A single value or an array of values.",
                    "type": "Value|Array of values"
                }
            ],
            "class": "EntityKey",
            "module": "entityModel"
        },
        {
            "file": "entityAspect.js",
            "line": 859,
            "description": "Used to compare EntityKeys are determine if they refer to the same Entity.\nThere is also an static version of 'equals' with the same functionality.",
            "example": [
                "\n    // assume em1 is an EntityManager containing a number of existing entities.\n    var empType = em1.metadataStore.getEntityType(\"Employee\");\n    var empKey1 = new EntityKey(empType, 1);\n    // assume employee1 is an existing Employee entity\n    var empKey2 = employee1.entityAspect.getKey();\n    if (empKey1.equals(empKey2)) {\n       // do something  ...\n    }"
            ],
            "itemtype": "method",
            "name": "equals",
            "params": [
                {
                    "name": "entityKey",
                    "description": "",
                    "type": "EntityKey"
                }
            ],
            "class": "EntityKey",
            "module": "entityModel"
        },
        {
            "file": "entityAspect.js",
            "line": 888,
            "description": "Used to compare EntityKeys are determine if they refer to the same Entity. \nThere is also an instance version of 'equals' with the same functionality.",
            "example": [
                "\n    // assume em1 is an EntityManager containing a number of existing entities.\n    var empType = em1.metadataStore.getEntityType(\"Employee\");\n    var empKey1 = new EntityKey(empType, 1);\n    // assume employee1 is an existing Employee entity\n    var empKey2 = employee1.entityAspect.getKey();\n    if (EntityKey.equals(empKey1, empKey2)) {\n       // do something  ...\n    }"
            ],
            "itemtype": "method",
            "name": "equals",
            "static": 1,
            "params": [
                {
                    "name": "k1",
                    "description": "",
                    "type": "EntityKey"
                },
                {
                    "name": "k2",
                    "description": "",
                    "type": "EntityKey"
                }
            ],
            "class": "EntityKey",
            "module": "entityModel"
        },
        {
            "file": "entityManager.js",
            "line": 40,
            "example": [
                "                    \nAt its most basic an EntityManager can be constructed with just a service name",
                "                    \n    var entityManager = new EntityManager( \"api/NorthwindIBModel\");\nThis is the same as calling it with the following configuration object",
                "                    \n    var entityManager = new EntityManager( {serviceName: \"api/NorthwindIBModel\" });\nUsually however, configuration objects will contain more than just the 'serviceName';",
                "\n    var metadataStore = new MetadataStore();\n    var entityManager = new EntityManager( {\n        serviceName: \"api/NorthwindIBModel\", \n        metadataStore: metadataStore \n    });\nor",
                "\n    return new QueryOptions({ \n        mergeStrategy: obj, \n        fetchStrategy: this.fetchStrategy \n    });\n    var queryOptions = new QueryOptions({ \n        mergeStrategy: MergeStrategy.OverwriteChanges, \n        fetchStrategy: FetchStrategy.FromServer \n    });\n    var validationOptions = new ValidationOptions({ \n        validateOnAttach: true, \n        validateOnSave: true, \n        validateOnQuery: false\n    });\n    var entityManager = new EntityManager({ \n        serviceName: \"api/NorthwindIBModel\", \n        queryOptions: queryOptions, \n        validationOptions: validationOptions \n    });"
            ],
            "itemtype": "method",
            "name": "<ctor> EntityManager",
            "params": [
                {
                    "name": "config",
                    "description": "Configuration settings or a service name.",
                    "type": "Object|String",
                    "optional": true,
                    "props": [
                        {
                            "name": "serviceName",
                            "description": "",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "metadataStore",
                            "description": "",
                            "type": "MetadataStore",
                            "optional": true,
                            "optdefault": "MetadataStore.defaultInstance"
                        },
                        {
                            "name": "queryOptions",
                            "description": "",
                            "type": "QueryOptions",
                            "optional": true,
                            "optdefault": "QueryOptions.defaultInstance"
                        },
                        {
                            "name": "saveOptions",
                            "description": "",
                            "type": "SaveOptions",
                            "optional": true,
                            "optdefault": "SaveOptions.defaultInstance"
                        },
                        {
                            "name": "validationOptions",
                            "description": "",
                            "type": "ValidationOptions",
                            "optional": true,
                            "optdefault": "ValidationOptions.defaultInstance"
                        },
                        {
                            "name": "keyGeneratorCtor",
                            "description": "",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "remoteAccessImplementation",
                            "description": "",
                            "type": "Instance of RemoteAccessImplementation interface",
                            "optional": true
                        }
                    ]
                }
            ],
            "class": "EntityManager",
            "module": "entityModel"
        },
        {
            "file": "entityManager.js",
            "line": 129,
            "description": "The service name associated with this EntityManager.\n\n__readOnly__",
            "itemtype": "property",
            "name": "serviceName",
            "type": "String",
            "class": "EntityManager",
            "module": "entityModel"
        },
        {
            "file": "entityManager.js",
            "line": 136,
            "description": "The {{#crossLink \"MetadataStore\"}}{{/crossLink}} associated with this EntityManager. \n\n __readOnly__",
            "itemtype": "property",
            "name": "metadataStore",
            "type": "MetadataStore",
            "class": "EntityManager",
            "module": "entityModel"
        },
        {
            "file": "entityManager.js",
            "line": 143,
            "description": "The {{#crossLink \"QueryOptions\"}}{{/crossLink}} associated with this EntityManager.\n\n__readOnly__",
            "itemtype": "property",
            "name": "queryOptions",
            "type": "QueryOptions",
            "class": "EntityManager",
            "module": "entityModel"
        },
        {
            "file": "entityManager.js",
            "line": 150,
            "description": "The {{#crossLink \"SaveOptions\"}}{{/crossLink}} associated with this EntityManager.\n\n__readOnly__",
            "itemtype": "property",
            "name": "saveOptions",
            "type": "SaveOptions",
            "class": "EntityManager",
            "module": "entityModel"
        },
        {
            "file": "entityManager.js",
            "line": 157,
            "description": "The {{#crossLink \"ValidationOptions\"}}{{/crossLink}} associated with this EntityManager.\n\n__readOnly__",
            "itemtype": "property",
            "name": "validationOptions",
            "type": "ValidationOptions",
            "class": "EntityManager",
            "module": "entityModel"
        },
        {
            "file": "entityManager.js",
            "line": 164,
            "description": "The {{#crossLink \"KeyGenerator\"}}{{/crossLink}} constructor associated with this EntityManager.\n\n__readOnly__",
            "itemtype": "property",
            "name": "keyGeneratorCtor",
            "type": "KeyGenerator constructor",
            "class": "EntityManager",
            "module": "entityModel"
        },
        {
            "file": "entityManager.js",
            "line": 171,
            "description": "The RemoteAccess implementation instance associated with this EntityManager.\n\n__readOnly__",
            "itemtype": "property",
            "name": "remoteAccessImplementation",
            "type": "Implementation instance of remoteAccessImplementation interface",
            "class": "EntityManager",
            "module": "entityModel"
        },
        {
            "file": "entityManager.js",
            "line": 179,
            "description": "An {{#crossLink \"Event\"}}{{/crossLink}} that fires whenever a change to any entity in this EntityManager occurs.",
            "example": [
                "                    \n    var em = new EntityManager( {serviceName: \"api/NorthwindIBModel\" });\n    em.entityChanged.subscribe(function(changeArgs) {\n        // This code will be executed any time any entity within the entityManager is added, modified, deleted or detached for any reason. \n        var action = changeArgs.entityAction;\n        var entity = changeArgs.entity;\n        // .. do something to this entity when it is changed.\n    });\n});"
            ],
            "itemtype": "event",
            "name": "entityChanged",
            "params": [
                {
                    "name": "entityAction",
                    "description": "The {{#crossLink \"EntityAction\"}}{{/crossLink}} that occured.",
                    "type": "EntityAction"
                },
                {
                    "name": "entity",
                    "description": "The entity that changed.  If this is null, then all entities in the entityManager were affected.",
                    "type": "Object"
                },
                {
                    "name": "args",
                    "description": "Additional information about this event. This will differ based on the entityAction.",
                    "type": "Object"
                }
            ],
            "readonly": "",
            "class": "EntityManager",
            "module": "entityModel"
        },
        {
            "file": "entityManager.js",
            "line": 200,
            "description": "Creates a new EntityManager and imports a previously exported result into it.",
            "example": [
                "\n    // assume em1 is an EntityManager containing a number of preexisting entities.\n    var bundle = em1.exportEntities();\n    // can be stored via the web storage api\n    window.localStorage.setItem(\"myEntityManager\", bundle);\n    // assume the code below occurs in a different session.\n    var bundleFromStorage = window.localStorage.getItem(\"myEntityManager\");\n    // and imported\n    var em2 = EntityManager.importEntities(bundleFromStorage);\n    // em2 will now have a complete copy of what was in em1"
            ],
            "itemtype": "method",
            "name": "importEntities",
            "static": 1,
            "params": [
                {
                    "name": "exportedString",
                    "description": "The result of a previous 'exportEntities' call.",
                    "type": "String"
                },
                {
                    "name": "config",
                    "description": "A configuration object.",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "mergeStrategy",
                            "description": "A  {{#crossLink \"MergeStrategy\"}}{{/crossLink}} to use when \nmerging into an existing EntityManager.",
                            "type": "MergeStrategy",
                            "optional": true
                        }
                    ]
                }
            ],
            "return": {
                "description": "A new EntityManager.",
                "type": "EntityManager"
            },
            "class": "EntityManager",
            "module": "entityModel"
        },
        {
            "file": "entityManager.js",
            "line": 228,
            "description": "Exports an entire EntityManager or just selected entities into a serialized string for external storage.",
            "example": [
                "\nThis method can be used to take a snapshot of an EntityManager that can be either stored offline or held \nmemory.  This snapshot can be restored or merged into an another EntityManager at some later date. ",
                "\n    // assume em1 is an EntityManager containing a number of existing entities.\n    var bundle = em1.exportEntities();\n    // can be stored via the web storage api\n    window.localStorage.setItem(\"myEntityManager\", bundle);\n    // assume the code below occurs in a different session.\n    var bundleFromStorage = window.localStorage.getItem(\"myEntityManager\");\n    var em2 = new EntityManager({ \n        serviceName: em1.serviceName, \n        metadataStore: em1.metadataStore \n    });\n    em2.importEntities(bundleFromStorage);\n    // em2 will now have a complete copy of what was in em1\nYou can also control exactly which entities are exported. ",
                "\n    // assume entitiesToExport is an array of entities to export.\n    var bundle = em1.exportEntities(entitiesToExport);\n    // assume em2 is another entityManager containing some of the same entities possibly with modifications.\n    em2.importEntities(bundle, { mergeStrategy: MergeStrategy.PreserveChanges} );"
            ],
            "itemtype": "method",
            "name": "exportEntities",
            "params": [
                {
                    "name": "entities",
                    "description": "The entities to export; all entities are exported if this is omitted.",
                    "type": "Array of entities",
                    "optional": true
                }
            ],
            "return": {
                "description": "A serialized version of the exported data.",
                "type": "String"
            },
            "class": "EntityManager",
            "module": "entityModel"
        },
        {
            "file": "entityManager.js",
            "line": 271,
            "description": "Imports a previously exported result into this EntityManager.",
            "example": [
                "\nThis method can be used to make a complete copy of any previously created entityManager, even if created\nin a previous session and stored in localStorage. The static version of this method performs a\nvery similar process. ",
                "\n    // assume em1 is an EntityManager containing a number of existing entities.\n    var bundle = em1.exportEntities();\n    // bundle can be stored in window.localStorage or just held in memory.\n    var em2 = new EntityManager({ \n        serviceName: em1.serviceName, \n        metadataStore: em1.metadataStore \n    });\n    em2.importEntities(bundle);\n    // em2 will now have a complete copy of what was in em1\nIt can also be used to merge the contents of a previously created EntityManager with an \nexisting EntityManager with control over how the two are merged.",
                "\n    var bundle = em1.exportEntities();\n    // assume em2 is another entityManager containing some of the same entities possibly with modifications.\n    em2.importEntities(bundle, { mergeStrategy: MergeStrategy.PreserveChanges} );\n    // em2 will now contain all of the entities from both em1 and em2.  Any em2 entities with previously \n    // made modifications will not have been touched, but all other entities from em1 will have been imported."
            ],
            "itemtype": "method",
            "name": "importEntities",
            "params": [
                {
                    "name": "exportedString",
                    "description": "The result of a previous 'export' call.",
                    "type": "String"
                },
                {
                    "name": "config",
                    "description": "A configuration object.",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "mergeStrategy",
                            "description": "A  {{#crossLink \"MergeStrategy\"}}{{/crossLink}} to use when \n    merging into an existing EntityManager.",
                            "type": "MergeStrategy",
                            "optional": true
                        }
                    ]
                }
            ],
            "chainable": 1,
            "class": "EntityManager",
            "module": "entityModel"
        },
        {
            "file": "entityManager.js",
            "line": 337,
            "description": "Clears this EntityManager's cache but keeps all other settings. Note that this \nmethod is not as fast as creating a new EntityManager via 'new EntityManager'.\nThis is because clear actually detaches all of the entities from the EntityManager.",
            "example": [
                "\n    // assume em1 is an EntityManager containing a number of existing entities.\n    em1.clear();\n    // em1 is will now contain no entities, but all other setting will be maintained."
            ],
            "itemtype": "method",
            "name": "clear",
            "class": "EntityManager",
            "module": "entityModel"
        },
        {
            "file": "entityManager.js",
            "line": 358,
            "description": "General purpose property set method.  Any of the properties documented below \nmay be set.",
            "example": [
                "\n     // assume em1 is a previously created EntityManager\n     // where we want to change some of its settings.\n     em1.setProperties( {\n        serviceName: \"api/foo\",\n        });"
            ],
            "itemtype": "method",
            "name": "setProperties",
            "params": [
                {
                    "name": "config",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "serviceName",
                            "description": "",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "queryOptions",
                            "description": "",
                            "type": "QueryOptions",
                            "optional": true
                        },
                        {
                            "name": "saveOptions",
                            "description": "",
                            "type": "SaveOptions",
                            "optional": true
                        },
                        {
                            "name": "validationOptions",
                            "description": "",
                            "type": "ValidationOptions",
                            "optional": true
                        },
                        {
                            "name": "remoteAccessImplementation",
                            "description": "",
                            "optional": true
                        },
                        {
                            "name": "keyGeneratorCtor",
                            "description": "",
                            "type": "Function",
                            "optional": true
                        }
                    ]
                }
            ],
            "class": "EntityManager",
            "module": "entityModel"
        },
        {
            "file": "entityManager.js",
            "line": 387,
            "description": "Creates an empty copy of this EntityManager",
            "example": [
                "\n    // assume em1 is an EntityManager containing a number of existing entities.\n    var em2 = em1.createEmptyCopy();\n    // em2 is a new EntityManager with all of em1's settings\n    // but no entities."
            ],
            "itemtype": "method",
            "name": "createEmptyCopy",
            "return": {
                "description": "A new EntityManager.",
                "type": "EntityManager"
            },
            "class": "EntityManager",
            "module": "entityModel"
        },
        {
            "file": "entityManager.js",
            "line": 408,
            "description": "Attaches an entity to this EntityManager with an  {{#crossLink \"EntityState\"}}{{/crossLink}} of 'Added'.",
            "example": [
                "\n    // assume em1 is an EntityManager containing a number of existing entities.\n    var custType = em1.metadataStore.getEntityType(\"Customer\");\n    var cust1 = custType.createEntity();\n    em1.addEntity(cust1);\nNote that this is the same as using 'attachEntity' with an {{#crossLink \"EntityState\"}}{{/crossLink}} of 'Added'.",
                "\n    // assume em1 is an EntityManager containing a number of existing entities.\n    var custType = em1.metadataStore.getEntityType(\"Customer\");\n    var cust1 = custType.createEntity();\n    em1.attachEntity(cust1, EntityState.Added);"
            ],
            "itemtype": "method",
            "name": "addEntity",
            "params": [
                {
                    "name": "entity",
                    "description": "The entity to add.",
                    "type": "Entity"
                }
            ],
            "return": {
                "description": "The added entity.",
                "type": "Entity"
            },
            "class": "EntityManager",
            "module": "entityModel"
        },
        {
            "file": "entityManager.js",
            "line": 429,
            "description": "Attaches an entity to this EntityManager with a specified {{#crossLink \"EntityState\"}}{{/crossLink}}.",
            "example": [
                "\n    // assume em1 is an EntityManager containing a number of existing entities.\n    var custType = em1.metadataStore.getEntityType(\"Customer\");\n    var cust1 = custType.createEntity();\n    em1.attachEntity(cust1, EntityState.Added);"
            ],
            "itemtype": "method",
            "name": "attachEntity",
            "params": [
                {
                    "name": "entity",
                    "description": "The entity to add.",
                    "type": "Entity"
                },
                {
                    "name": "entityState",
                    "description": "The EntityState of the newly attached entity. If omitted this defaults to EntityState.Unchanged.",
                    "type": "EntityState",
                    "optional": true
                }
            ],
            "return": {
                "description": "The attached entity.",
                "type": "Entity"
            },
            "class": "EntityManager",
            "module": "entityModel"
        },
        {
            "file": "entityManager.js",
            "line": 475,
            "description": "Detaches an entity from this EntityManager.",
            "example": [
                "\n    // assume em1 is an EntityManager containing a number of existing entities.\n    // assume cust1 is a customer Entity previously attached to em1\n    em1.detachEntity(cust1);\n    // em1 will now no longer contain cust1 and cust1 will have an \n    // entityAspect.entityState of EntityState.Detached"
            ],
            "itemtype": "method",
            "name": "detachEntity",
            "params": [
                {
                    "name": "entity",
                    "description": "The entity to detach.",
                    "type": "Entity"
                }
            ],
            "return": {
                "description": "Whether the entity could be detached. This will return false if the entity is already detached or was never attached.",
                "type": "Boolean"
            },
            "class": "EntityManager",
            "module": "entityModel"
        },
        {
            "file": "entityManager.js",
            "line": 508,
            "description": "Fetches the metadata associated with the EntityManager's current 'serviceName'.  This call\noccurs internally before the first query to any service if the metadata hasn't already been\nloaded.",
            "example": [
                "\nUsually you will not actually process the results of a fetchMetadata call directly, but will instead\nask for the metadata from the EntityManager after the fetchMetadata call returns.",
                "\n     var em1 = new EntityManager( \"api/NorthwindIBModel\");\n     em1.fetchMetadata()\n        .then(function() {\n            var metadataStore = em1.metadataStore;\n            // do something with the metadata\n        }\n        .fail(function(exception) {\n            // handle exception here\n        };"
            ],
            "itemtype": "method",
            "name": "fetchMetadata",
            "async": 1,
            "params": [
                {
                    "name": "callback",
                    "description": "Function called on success.\n\n    successFunction([schema])",
                    "type": "Function",
                    "optional": true,
                    "props": [
                        {
                            "name": "schema",
                            "description": "The raw Schema object from metadata provider - Because this schema will differ depending on the metadata provider\n    it is usually better to access metadata via the 'metadataStore' property of the EntityManager after this method's Promise or callback completes.",
                            "type": "Object",
                            "optional": true
                        }
                    ]
                },
                {
                    "name": "errorCallback",
                    "description": "Function called on failure.\n    \n    failureFunction([error])",
                    "type": "Function",
                    "optional": true,
                    "props": [
                        {
                            "name": "error",
                            "description": "Any error that occured wrapped into an Error object.",
                            "type": "Error",
                            "optional": true
                        }
                    ]
                }
            ],
            "return": {
                "description": "Promise",
                "type": "Promise"
            },
            "class": "EntityManager",
            "module": "entityModel"
        },
        {
            "file": "entityManager.js",
            "line": 556,
            "description": "Executes the specified query.",
            "example": [
                "\nThis method can be called using a 'promises' syntax ( recommended)",
                "\n     var em = new EntityManager(serviceName);\n     var query = new EntityQuery(\"Orders\");\n     em.executeQuery(query)\n       .then( function(data) {\n           var orders = data.results;\n           ... query results processed here\n     }).fail( function(err) {\n           ... query failure processed here\n     });\nor with callbacks",
                "\n     var em = new EntityManager(serviceName);\n     var query = new EntityQuery(\"Orders\");\n     em.executeQuery(query,\n        function(data) {\n           var orders = data.results;\n           ... query results processed here\n        },\n        function(err) {\n           ... query failure processed here\n        });\nEither way this method is the same as calling the The {{#crossLink \"EntityQuery\"}}{{/crossLink}} 'execute' method.",
                "\n     var em = new EntityManager(serviceName);\n     var query = new EntityQuery(\"Orders\").using(em);\n     query.execute()\n       .then( function(data) {\n           var orders = data.results;\n           ... query results processed here\n     }).fail( function(err) {\n           ... query failure processed here\n     });"
            ],
            "itemtype": "method",
            "name": "executeQuery",
            "async": 1,
            "params": [
                {
                    "name": "query",
                    "description": "The {{#crossLink \"EntityQuery\"}}{{/crossLink}} or OData query string to execute.",
                    "type": "EntityQuery|String"
                },
                {
                    "name": "callback",
                    "description": "Function called on success.\n\n    successFunction([data])",
                    "type": "Function",
                    "optional": true,
                    "props": [
                        {
                            "name": "data",
                            "description": "",
                            "type": "Object",
                            "props": [
                                {
                                    "name": "results",
                                    "description": "",
                                    "type": "Array of Entity"
                                },
                                {
                                    "name": "query",
                                    "description": "The original query",
                                    "type": "EntityQuery"
                                }
                            ]
                        }
                    ]
                },
                {
                    "name": "errorCallback",
                    "description": "Function called on failure.\n    \n    failureFunction([error])",
                    "type": "Function",
                    "optional": true,
                    "props": [
                        {
                            "name": "error",
                            "description": "Any error that occured wrapped into an Error object.",
                            "type": "Error",
                            "optional": true,
                            "props": [
                                {
                                    "name": "query",
                                    "description": "The query that caused the error.",
                                    "optional": true
                                }
                            ]
                        }
                    ]
                }
            ],
            "return": {
                "description": "Promise",
                "type": "Promise"
            },
            "class": "EntityManager",
            "module": "entityModel"
        },
        {
            "file": "entityManager.js",
            "line": 631,
            "description": "Executes the specified query against this EntityManager's local cache.",
            "example": [
                "\nBecause this method is executed immediately there is no need for a promise or a callback",
                "\n     var em = new EntityManager(serviceName);\n     var query = new EntityQuery(\"Orders\");\n     var orders = em.executeQueryLocally(query);\nNote that this can also be accomplished using the 'executeQuery' method with\na FetchStrategy of FromLocalCache and making use of the Promise or callback",
                "\n     var em = new EntityManager(serviceName);\n     var query = new EntityQuery(\"Orders\").using(FetchStrategy.FromLocalCache);\n     em.executeQuery(query)\n       .then( function(data) {\n           var orders = data.results;\n           ... query results processed here\n     }).fail( function(err) {\n           ... query failure processed here\n     });"
            ],
            "itemtype": "method",
            "name": "executeQueryLocally",
            "params": [
                {
                    "name": "query",
                    "description": "The {{#crossLink \"EntityQuery\"}}{{/crossLink}} to execute.",
                    "type": "EntityQuery"
                }
            ],
            "return": {
                "description": "Array of Entities",
                "type": "Array of Entity"
            },
            "class": "EntityManager",
            "module": "entityModel"
        },
        {
            "file": "entityManager.js",
            "line": 692,
            "description": "Saves either a list of specified entities or all changed entities within this EntityManager. If there are no changes to any of the entities\nspecified then there will be no server side call made but a valid 'empty' saveResult will still be returned.",
            "example": [
                "\nOften we will be saving all of the entities within an EntityManager that are either added, modified or deleted\nand we will let the 'saveChanges' call determine which entities these are. ",
                "\n    // assume em1 is an EntityManager containing a number of preexisting entities. \n    // This could include added, modified and deleted entities.\n    em.saveChanges().then(function(saveResult) {\n        var savedEntities = saveResult.entities;\n        var keyMappings = saveResult.keyMappings;\n    }).fail(function (e) {\n        // e is any exception that was thrown.\n    });\nBut we can also control exactly which entities to save and can specify specific SaveOptions",
                "\n    // assume entitiesToSave is an array of entities to save.\n    var saveOptions = new SaveOptions({ allowConcurrentSaves: true });\n    em.saveChanges(entitiesToSave, saveOptions).then(function(saveResult) {\n        var savedEntities = saveResult.entities;\n        var keyMappings = saveResult.keyMappings;\n    }).fail(function (e) {\n        // e is any exception that was thrown.\n    });\nCallback methods can also be used",
                "\n    em.saveChanges(entitiesToSave, null, \n        function(saveResult) {\n            var savedEntities = saveResult.entities;\n            var keyMappings = saveResult.keyMappings;\n        }, function (e) {\n            // e is any exception that was thrown.\n        }\n    );"
            ],
            "itemtype": "method",
            "name": "saveChanges",
            "async": 1,
            "params": [
                {
                    "name": "entities",
                    "description": "The list of entities to save.  All entities with changes \nwithin this EntityManager will be saved if this parameter is omitted, null or empty.",
                    "type": "Array of Entity",
                    "optional": true
                },
                {
                    "name": "saveOptions",
                    "description": "{{#crossLink \"SaveOptions\"}}{{/crossLink}} for the save - will default to\n{{#crossLink \"EntityManager/saveOptions\"}}{{/crossLink}} if null.",
                    "type": "SaveOptions",
                    "optional": true
                },
                {
                    "name": "callback",
                    "description": "Function called on success.\n\n    successFunction([saveResult])",
                    "type": "Function",
                    "optional": true,
                    "props": [
                        {
                            "name": "saveResult",
                            "description": "",
                            "type": "Object",
                            "optional": true,
                            "props": [
                                {
                                    "name": "entities",
                                    "description": "The saved entities - with any temporary keys converted into 'real' keys.  \n    These entities are actually references to entities in the EntityManager cache that have been updated as a result of the\n    save.",
                                    "type": "Array of Entity",
                                    "optional": true
                                },
                                {
                                    "name": "keyMappings",
                                    "description": "Map of OriginalEntityKey, NewEntityKey",
                                    "type": "Object",
                                    "optional": true
                                }
                            ]
                        }
                    ]
                },
                {
                    "name": "errorCallback",
                    "description": "Function called on failure.\n    \n    failureFunction([error])",
                    "type": "Function",
                    "optional": true,
                    "props": [
                        {
                            "name": "error",
                            "description": "Any error that occured wrapped into an Error object.",
                            "type": "Error",
                            "optional": true
                        }
                    ]
                }
            ],
            "return": {
                "description": "Promise",
                "type": "Promise"
            },
            "class": "EntityManager",
            "module": "entityModel"
        },
        {
            "file": "entityManager.js",
            "line": 827,
            "description": "Attempts to locate an entity within this EntityManager by its  {{#crossLink \"EntityKey\"}}{{/crossLink}}.",
            "example": [
                "\n    // assume em1 is an EntityManager containing a number of preexisting entities. \n    var employeeType = em1.metadataStore.getEntityType(\"Employee\");\n    var employeeKey = new EntityKey(employeeType, 1);\n    var employee = em1.findEntityByKey(employeeKey);\n    // employee will either be an entity or null."
            ],
            "itemtype": "method",
            "name": "findEntityByKey",
            "params": [
                {
                    "name": "entityKey",
                    "description": "The  {{#crossLink \"EntityKey\"}}{{/crossLink}} of the Entity to be located.",
                    "type": "EntityKey"
                }
            ],
            "return": {
                "description": "An Entity or null;",
                "type": "Entity"
            },
            "class": "EntityManager",
            "module": "entityModel"
        },
        {
            "file": "entityManager.js",
            "line": 848,
            "description": "Generates a temporary key for the specified entity.  This is used to insure that newly\ncreated entities have unique keys and to register that these keys are temporary and\nneed to be automatically replaced with 'real' key values once these entities are saved.\n\nThe EntityManager.keyGeneratorCtor property is used internally by this method to actually generate\nthe keys - See the  {{#crossLink \"~keyGenerator-interface\"}}{{/crossLink}} interface description to see\nhow a custom key generator can be plugged in.",
            "example": [
                "\n    // assume em1 is an EntityManager containing a number of preexisting entities. \n    var custType = em1.metadataStore.getEntityType(\"Customer\");\n    var custumer = custType.createEntity();\n    var customerId = em.generateTempKeyValue(custumer);\n    // The 'customer' entity 'CustomerID' property is now set to a newly generated unique id value\n    // This property will change again after a successful save of the 'customer' entity.\n\n    em1.saveChanges()\n        .then( function( data) {\n            var sameCust1 = data.results[0];\n            // cust1 === sameCust1;\n            // but cust1.getProperty(\"CustomerId\") != customerId\n            // because the server will have generated a new id \n            // and the client will have been updated with this \n            // new id.\n        })"
            ],
            "itemtype": "method",
            "name": "generateTempKeyValue",
            "params": [
                {
                    "name": "entity",
                    "description": "The Entity to generate a key for.",
                    "type": "Entity"
                }
            ],
            "return": {
                "description": "The new key value",
                "type": "Object"
            },
            "class": "EntityManager",
            "module": "entityModel"
        },
        {
            "file": "entityManager.js",
            "line": 889,
            "description": "Returns whether there are any changed entities of the specified {{#crossLink \"EntityType\"}}{{/crossLink}}s. A 'changed' Entity has\nhas an {{#crossLink \"EntityState\"}}{{/crossLink}} of either Added, Modified or Deleted.",
            "example": [
                "\nThis method can be used to determine if an EntityManager has any changes",
                "\n    // assume em1 is an EntityManager containing a number of preexisting entities. \n    if ( em1.hasChanges() {\n       // do something interesting\n    }\nor if it has any changes on to a specific {{#crossLink \"EntityType\"}}{{/crossLink}}",
                "\n    // assume em1 is an EntityManager containing a number of preexisting entities. \n    var custType = em1.metadataStore.getEntityType(\"Customer\");\n    if ( em1.hasChanges(custType) {\n       // do something interesting\n    }\nor to a collection of {{#crossLink \"EntityType\"}}{{/crossLink}}s",
                "\n    // assume em1 is an EntityManager containing a number of preexisting entities. \n    var custType = em1.metadataStore.getEntityType(\"Customer\");\n    var orderType = em1.metadataStore.getEntityType(\"Order\");\n    if ( em1.hasChanges( [custType, orderType]) {\n       // do something interesting\n    }"
            ],
            "itemtype": "method",
            "name": "hasChanges",
            "params": [
                {
                    "name": "entityTypes",
                    "description": "The {{#crossLink \"EntityType\"}}{{/crossLink}}s for which 'changed' entities will be found.\nIf this parameter is omitted, all EntityTypes are searched.",
                    "type": "EntityType|Array of EntityType",
                    "optional": true
                }
            ],
            "return": {
                "description": "Whether there were any changed entities.",
                "type": "Boolean"
            },
            "class": "EntityManager",
            "module": "entityModel"
        },
        {
            "file": "entityManager.js",
            "line": 927,
            "description": "Returns a array of all changed entities of the specified {{#crossLink \"EntityType\"}}{{/crossLink}}s. A 'changed' Entity has\nhas an {{#crossLink \"EntityState\"}}{{/crossLink}} of either Added, Modified or Deleted.",
            "example": [
                "\nThis method can be used to get all of the changed entities within an EntityManager",
                "\n    // assume em1 is an EntityManager containing a number of preexisting entities. \n    var changedEntities = em1.getChanges();\nor you can specify that you only want the changes on a specific {{#crossLink \"EntityType\"}}{{/crossLink}}",
                "\n    // assume em1 is an EntityManager containing a number of preexisting entities. \n    var custType = em1.metadataStore.getEntityType(\"Customer\");\n    var changedCustomers = em1.getChanges(custType);\nor to a collection of {{#crossLink \"EntityType\"}}{{/crossLink}}s",
                "\n    // assume em1 is an EntityManager containing a number of preexisting entities. \n    var custType = em1.metadataStore.getEntityType(\"Customer\");\n    var orderType = em1.metadataStore.getEntityType(\"Order\");\n    var changedCustomersAndOrders = em1.getChanges([custType, orderType]);"
            ],
            "itemtype": "method",
            "name": "getChanges",
            "params": [
                {
                    "name": "entityTypes",
                    "description": "The {{#crossLink \"EntityType\"}}{{/crossLink}}s for which 'changed' entities will be found.\nIf this parameter is omitted, all EntityTypes are searched.",
                    "type": "EntityType|Array of EntityType",
                    "optional": true
                }
            ],
            "return": {
                "description": "Array of Entities",
                "type": "Array of Entity"
            },
            "class": "EntityManager",
            "module": "entityModel"
        },
        {
            "file": "entityManager.js",
            "line": 957,
            "description": "Rejects (reverses the effects) all of the additions, modifications and deletes from this EntityManager.",
            "example": [
                "\n    // assume em1 is an EntityManager containing a number of preexisting entities.\n    var entities = em1.rejectChanges();"
            ],
            "itemtype": "method",
            "name": "rejectChanges",
            "return": {
                "description": "The entities whose changes were rejected. These entities will all have EntityStates of \neither 'Unchanged' or 'Detached'",
                "type": "Array of Entity"
            },
            "class": "EntityManager",
            "module": "entityModel"
        },
        {
            "file": "entityManager.js",
            "line": 976,
            "description": "Returns a array of all entities of the specified {{#crossLink \"EntityType\"}}{{/crossLink}}s with the specified {{#crossLink \"EntityState\"}}{{/crossLink}}s.",
            "example": [
                "\nThis method can be used to get all of the entities within an EntityManager",
                "\n    // assume em1 is an EntityManager containing a number of preexisting entities. \n    var entities = em1.getEntities();\nor you can specify that you only want the changes on a specific {{#crossLink \"EntityType\"}}{{/crossLink}}",
                "\n    // assume em1 is an EntityManager containing a number of preexisting entities. \n    var custType = em1.metadataStore.getEntityType(\"Customer\");\n    var customers = em1.getEntities(custType);\nor to a collection of {{#crossLink \"EntityType\"}}{{/crossLink}}s",
                "\n    // assume em1 is an EntityManager containing a number of preexisting entities. \n    var custType = em1.metadataStore.getEntityType(\"Customer\");\n    var orderType = em1.metadataStore.getEntityType(\"Order\");\n    var customersAndOrders = em1.getChanges([custType, orderType]);\nYou can also ask for entities with a particular {{#crossLink \"EntityState\"}}{{/crossLink}} or EntityStates.",
                "\n    // assume em1 is an EntityManager containing a number of preexisting entities. \n    var custType = em1.metadataStore.getEntityType(\"Customer\");\n    var orderType = em1.metadataStore.getEntityType(\"Order\");\n    var addedCustomersAndOrders = em1.getEntities([custType, orderType], EntityState.Added);"
            ],
            "itemtype": "method",
            "name": "getEntities",
            "params": [
                {
                    "name": "entityTypes",
                    "description": "The {{#crossLink \"EntityType\"}}{{/crossLink}}s for which entities will be found.\nIf this parameter is omitted, all EntityTypes are searched.",
                    "type": "EntityType|Array of EntityType",
                    "optional": true
                },
                {
                    "name": "entityState",
                    "description": "The {{#crossLink \"EntityState\"}}{{/crossLink}}s for which entities will be found.\nIf this parameter is omitted, entities of all EntityStates are returned.",
                    "type": "EntityState|Array of EntityState",
                    "optional": true
                }
            ],
            "return": {
                "description": "Array of Entities",
                "type": "Array of Entity"
            },
            "class": "EntityManager",
            "module": "entityModel"
        },
        {
            "file": "entityManager.js",
            "line": 1969,
            "description": "PreserveChanges is used to stop merging from occuring if the existing entity in an entityManager is already\nin a {{#crossLink \"EntityState/Modified\"}}{{/crossLink}} state. In this case, the existing entity in the \nEntityManager is not replaced by the 'merging' entity.",
            "itemtype": "property",
            "name": "PreserveChanges",
            "type": "MergeStrategy",
            "final": 1,
            "static": 1,
            "class": "MergeStrategy",
            "module": "entityModel"
        },
        {
            "file": "entityManager.js",
            "line": 1979,
            "description": "OverwriteChanges is used to allow merging to occur even if the existing entity in an entityManager is already\nin a {{#crossLink \"EntityState/Modified\"}}{{/crossLink}} state. In this case, the existing entity in the \nEntityManager is replaced by the 'merging' entity.",
            "itemtype": "property",
            "name": "OverwriteChanges",
            "type": "MergeStrategy",
            "final": 1,
            "static": 1,
            "class": "MergeStrategy",
            "module": "entityModel"
        },
        {
            "file": "entityManager.js",
            "line": 1998,
            "description": "FromServer is used to tell the query to execute the query against a remote data source on the server.",
            "itemtype": "property",
            "name": "FromServer",
            "type": "MergeStrategy",
            "final": 1,
            "static": 1,
            "class": "FetchStrategy",
            "module": "entityModel"
        },
        {
            "file": "entityManager.js",
            "line": 2005,
            "description": "FromLocalCache is used to tell the query to execute the query against a local EntityManager instead of going to a remote server.",
            "itemtype": "property",
            "name": "FromLocalCache",
            "type": "MergeStrategy",
            "final": 1,
            "static": 1,
            "class": "FetchStrategy",
            "module": "entityModel"
        },
        {
            "file": "entityManager.js",
            "line": 2022,
            "description": "QueryOptions constructor",
            "example": [
                "\n    var newQo = new QueryOptions( { mergeStrategy: MergeStrategy.OverwriteChanges });\n    // assume em1 is a preexisting EntityManager\n    em1.setProperties( { queryOptions: newQo });"
            ],
            "itemtype": "method",
            "name": "<ctor> QueryOptions",
            "params": [
                {
                    "name": "config",
                    "description": "",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "fetchStrategy",
                            "description": "",
                            "type": "FetchStrategy",
                            "optional": true,
                            "optdefault": "FetchStrategy.FromServer"
                        },
                        {
                            "name": "mergeStrategy",
                            "description": "",
                            "type": "MergeStrategy",
                            "optional": true,
                            "optdefault": "MergeStrategy.PreserveChanges"
                        }
                    ]
                }
            ],
            "class": "QueryOptions",
            "module": "entityModel"
        },
        {
            "file": "entityManager.js",
            "line": 2041,
            "description": "A {{#crossLink \"FetchStrategy\"}}{{/crossLink}}\n__readOnly__",
            "itemtype": "property",
            "name": "fetchStrategy",
            "type": "FetchStrategy",
            "class": "QueryOptions",
            "module": "entityModel"
        },
        {
            "file": "entityManager.js",
            "line": 2047,
            "description": "A {{#crossLink \"MergeStrategy\"}}{{/crossLink}}\n__readOnly__",
            "itemtype": "property",
            "name": "mergeStrategy",
            "type": "MergeStrategy",
            "class": "QueryOptions",
            "module": "entityModel"
        },
        {
            "file": "entityManager.js",
            "line": 2055,
            "description": "The default value whenever QueryOptions are not specified.",
            "itemtype": "property",
            "name": "defaultInstance",
            "type": "QueryOptions",
            "static": 1,
            "class": "QueryOptions",
            "module": "entityModel"
        },
        {
            "file": "entityManager.js",
            "line": 2062,
            "description": "Returns a copy of this QueryOptions with the specified {{#crossLink \"MergeStrategy\"}}{{/crossLink}} \nor {{#crossLink \"FetchStrategy\"}}{{/crossLink}} applied.",
            "example": [
                "\n    var queryOptions = em1.defaultQueryOptions.using(MergeStrategy.PreserveChanges);\nor",
                "\n    var queryOptions = em1.defaultQueryOptions.using(FetchStrategy.FromLocalCache);\nor",
                "\n    var queryOptions = em1.defaultQueryOptions.using( { mergeStrategy: OverwriteChanges });"
            ],
            "itemtype": "method",
            "name": "using",
            "params": [
                {
                    "name": "config",
                    "description": "The object to apply to create a new QueryOptions.",
                    "type": "Configuration Object|MergeStrategy|FetchStrategy"
                }
            ],
            "return": {
                "description": "",
                "type": "QueryOptions"
            },
            "chainable": 1,
            "class": "QueryOptions",
            "module": "entityModel"
        },
        {
            "file": "entityManager.js",
            "line": 2088,
            "description": "Makes this instance the default instance.",
            "itemtype": "method",
            "name": "setAsDefault",
            "example": [
                "\n    var newQo = new QueryOptions( { mergeStrategy: MergeStrategy.OverwriteChanges });\n    newQo.setAsDefault();"
            ],
            "chainable": 1,
            "class": "QueryOptions",
            "module": "entityModel"
        },
        {
            "file": "entityManager.js",
            "line": 2135,
            "itemtype": "method",
            "name": "<ctor> SaveOptions",
            "params": [
                {
                    "name": "config",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "allowConcurrentSaves",
                            "description": "",
                            "type": "Boolean",
                            "optional": true
                        }
                    ]
                }
            ],
            "class": "SaveOptions",
            "module": "entityModel"
        },
        {
            "file": "entityManager.js",
            "line": 2149,
            "description": "Makes this instance the default instance.",
            "itemtype": "method",
            "name": "setAsDefault",
            "chainable": 1,
            "class": "SaveOptions",
            "module": "entityModel"
        },
        {
            "file": "entityManager.js",
            "line": 2159,
            "description": "Whether another save can be occuring at the same time as this one - default is false.\n\n__readOnly__",
            "itemtype": "property",
            "name": "allowConcurrentSaves",
            "type": "Boolean",
            "class": "SaveOptions",
            "module": "entityModel"
        },
        {
            "file": "entityManager.js",
            "line": 2166,
            "description": "The default value whenever SaveOptions are not specified.",
            "itemtype": "property",
            "name": "defaultInstance",
            "type": "SaveOptions",
            "static": 1,
            "class": "SaveOptions",
            "module": "entityModel"
        },
        {
            "file": "entityManager.js",
            "line": 2183,
            "description": "ValidationOptions constructor",
            "example": [
                "\n    var newVo = new ValidationOptions( { validateOnSave: false, validateOnAttach: false });\n    // assume em1 is a preexisting EntityManager\n    em1.setProperties( { validationOptions: newVo });"
            ],
            "itemtype": "method",
            "name": "<ctor> ValidationOptions",
            "params": [
                {
                    "name": "config",
                    "description": "",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "validateOnAttach",
                            "description": "",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        },
                        {
                            "name": "validateOnSave",
                            "description": "",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        },
                        {
                            "name": "validateOnQuery",
                            "description": "",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "validateOnPropertyChange",
                            "description": "",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        }
                    ]
                }
            ],
            "class": "ValidationOptions",
            "module": "entityModel"
        },
        {
            "file": "entityManager.js",
            "line": 2204,
            "description": "Whether entity and property level validation should occur when entities are attached to the EntityManager other than via a query.\n\n__readOnly__",
            "itemtype": "property",
            "name": "validateOnAttach",
            "type": "Boolean",
            "class": "ValidationOptions",
            "module": "entityModel"
        },
        {
            "file": "entityManager.js",
            "line": 2211,
            "description": "Whether entity and property level validation should occur before entities are saved. A failed validation will force the save to fail early.\n\n__readOnly__",
            "itemtype": "property",
            "name": "validateOnSave",
            "type": "Boolean",
            "class": "ValidationOptions",
            "module": "entityModel"
        },
        {
            "file": "entityManager.js",
            "line": 2218,
            "description": "Whether entity and property level validation should occur after entities are queried from a remote server.\n\n__readOnly__",
            "itemtype": "property",
            "name": "validateOnQuery",
            "type": "Boolean",
            "class": "ValidationOptions",
            "module": "entityModel"
        },
        {
            "file": "entityManager.js",
            "line": 2225,
            "description": "Whether property level validation should occur after entities are modified.\n\n__readOnly__",
            "itemtype": "property",
            "name": "validateOnPropertyChange",
            "type": "Boolean",
            "class": "ValidationOptions",
            "module": "entityModel"
        },
        {
            "file": "entityManager.js",
            "line": 2234,
            "description": "Returns a copy of this ValidationOptions with changes to the specified config properties.",
            "example": [
                "\n    var validationOptions = new ValidationOptions();\n    var newOptions = validationOptions.using( { validateOnQuery: true, validateOnSave: false} );"
            ],
            "itemtype": "method",
            "name": "using",
            "params": [
                {
                    "name": "config",
                    "description": "The object to apply to create a new QueryOptions.",
                    "type": "Object",
                    "props": [
                        {
                            "name": "validateOnAttach",
                            "description": "",
                            "type": "Boolean",
                            "optional": true
                        },
                        {
                            "name": "validateOnSave",
                            "description": "",
                            "type": "Boolean",
                            "optional": true
                        },
                        {
                            "name": "validateOnQuery",
                            "description": "",
                            "type": "Boolean",
                            "optional": true
                        },
                        {
                            "name": "validateOnPropertyChange",
                            "description": "",
                            "type": "Boolean",
                            "optional": true
                        }
                    ]
                }
            ],
            "return": {
                "description": "",
                "type": "ValidationOptions"
            },
            "chainable": 1,
            "class": "ValidationOptions",
            "module": "entityModel"
        },
        {
            "file": "entityManager.js",
            "line": 2254,
            "description": "Makes this instance the default instance.",
            "example": [
                "\n    var validationOptions = new ValidationOptions()\n    var newOptions = validationOptions.using( { validateOnQuery: true, validateOnSave: false} );\n    var newOptions.setAsDefault();"
            ],
            "itemtype": "method",
            "name": "setAsDefault",
            "chainable": 1,
            "class": "ValidationOptions",
            "module": "entityModel"
        },
        {
            "file": "entityManager.js",
            "line": 2268,
            "description": "The default value whenever ValidationOptions are not specified.",
            "itemtype": "property",
            "name": "defaultInstance",
            "type": "ValidationOptions",
            "static": 1,
            "class": "ValidationOptions",
            "module": "entityModel"
        },
        {
            "file": "entityMetadata.js",
            "line": 35,
            "description": "NamingConvention constructor",
            "example": [
                "\n    // A naming convention that converts the first character of every property name to uppercase on the server\n    // and lowercase on the client.\n    var namingConv = new NamingConvention({\n        serverPropertyNameToClient: function(serverPropertyName) {\n            return serverPropertyName.substr(0, 1).toLowerCase() + serverPropertyName.substr(1);\n        },\n        clientPropertyNameToServer: function(clientPropertyName) {\n            return clientPropertyName.substr(0, 1).toUpperCase() + clientPropertyName.substr(1);\n        }            \n    });\n    var ms = new MetadataStore({ namingConvention: namingConv });\n    var em = new EntityManager( { metadataStore: ms });"
            ],
            "itemtype": "method",
            "name": "<ctor> NamingConvention",
            "params": [
                {
                    "name": "config",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "serverPropertyNameToClient",
                            "description": "Function that takes a server property name add converts it into a client side property name.",
                            "type": "Function"
                        },
                        {
                            "name": "clientPropertyNameToServer",
                            "description": "Function that takes a client property name add converts it into a server side property name.",
                            "type": "Function"
                        }
                    ]
                }
            ],
            "class": "NamingConvention",
            "module": "entityModel"
        },
        {
            "file": "entityMetadata.js",
            "line": 68,
            "description": "The function used to convert server side property names to client side property names.",
            "itemtype": "method",
            "name": "serverPropertyNameToClient",
            "params": [
                {
                    "name": "serverPropertyName",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "property",
                    "description": "The actual DataProperty or NavigationProperty corresponding to the property name.",
                    "type": "DataProperty|NavigationProperty",
                    "optional": true
                }
            ],
            "return": {
                "description": "The client side property name.",
                "type": "String"
            },
            "class": "NamingConvention",
            "module": "entityModel"
        },
        {
            "file": "entityMetadata.js",
            "line": 77,
            "description": "The function used to convert client side property names to server side property names.",
            "itemtype": "method",
            "name": "clientPropertyNameToServer",
            "params": [
                {
                    "name": "clientPropertyName",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "property",
                    "description": "The actual DataProperty or NavigationProperty corresponding to the property name.",
                    "type": "DataProperty|NavigationProperty",
                    "optional": true
                }
            ],
            "return": {
                "description": "The server side property name.",
                "type": "String"
            },
            "class": "NamingConvention",
            "module": "entityModel"
        },
        {
            "file": "entityMetadata.js",
            "line": 86,
            "description": "The default value whenever NamingConventions are not specified.",
            "itemtype": "property",
            "name": "defaultInstance",
            "type": "NamingConvention",
            "static": 1,
            "class": "NamingConvention",
            "module": "entityModel"
        },
        {
            "file": "entityMetadata.js",
            "line": 101,
            "description": "Makes this instance the default instance.",
            "itemtype": "method",
            "name": "setAsDefault",
            "example": [
                "\n    var namingConv = new NamingConvention({\n        serverPropertyNameToClient: function(serverPropertyName) {\n            return serverPropertyName.substr(0, 1).toLowerCase() + serverPropertyName.substr(1);\n        },\n        clientPropertyNameToServer: function(clientPropertyName) {\n            return clientPropertyName.substr(0, 1).toUpperCase() + clientPropertyName.substr(1);\n        }            \n    });\n    namingConv.setAsDefault();"
            ],
            "chainable": 1,
            "class": "NamingConvention",
            "module": "entityModel"
        },
        {
            "file": "entityMetadata.js",
            "line": 135,
            "description": "Constructs a new MetadataStore.",
            "example": [
                "\n    var ms = new MetadataStore();\nThe store can then be associated with an EntityManager",
                "\n    var entityManager = new EntityManager( {\n        serviceName: \"api/NorthwindIBModel\", \n        metadataStore: ms \n    });\nor for an existing EntityManager",
                "\n    // Assume em1 is an existing EntityManager\n    em1.setProperties( { metadataStore: ms });"
            ],
            "itemtype": "method",
            "name": "<ctor> MetadataStore",
            "params": [
                {
                    "name": "config",
                    "description": "Configuration settings .",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "namingConvention",
                            "description": "NamingConvention to be used in mapping property names\nbetween client and server. Uses the NamingConvention.defaultInstance if not specified.",
                            "type": "NamingConvention",
                            "optional": true,
                            "optdefault": "NamingConvention.defaultInstance"
                        }
                    ]
                }
            ],
            "class": "MetadataStore",
            "module": "entityModel"
        },
        {
            "file": "entityMetadata.js",
            "line": 172,
            "description": "The  {{#crossLink \"NamingConvention\"}}{{/crossLink}} associated with this MetadataStore.\n\n__readOnly__",
            "itemtype": "property",
            "name": "namingConvention",
            "type": "NamingConvention",
            "class": "MetadataStore",
            "module": "entityModel"
        },
        {
            "file": "entityMetadata.js",
            "line": 179,
            "description": "Exports this MetadataStore to a serialized string appropriate for local storage.   This operation is also called \ninternally when exporting an EntityManager.",
            "example": [
                "\n    // assume ms is a previously created MetadataStore\n    var metadataAsString = ms.exportMetadata();\n    window.localStorage.setItem(\"metadata\", metadataAsString);\n    // and later, usually in a different session imported\n    var metadataFromStorage = window.localStorage.getItem(\"metadata\");\n    var newMetadataStore = new MetadataStore();\n    newMetadataStore.importMetadata(metadataFromStorage);"
            ],
            "itemtype": "method",
            "name": "exportMetadata",
            "return": {
                "description": "A serialized version of this MetadataStore that may be stored locally and later restored.",
                "type": "String"
            },
            "class": "MetadataStore",
            "module": "entityModel"
        },
        {
            "file": "entityMetadata.js",
            "line": 203,
            "description": "Imports a previously exported serialized MetadataStore into this MetadataStore.",
            "example": [
                "\n    // assume ms is a previously created MetadataStore\n    var metadataAsString = ms.exportMetadata();\n    window.localStorage.setItem(\"metadata\", metadataAsString);\n    // and later, usually in a different session\n    var metadataFromStorage = window.localStorage.getItem(\"metadata\");\n    var newMetadataStore = new MetadataStore();\n    newMetadataStore.importMetadata(metadataFromStorage);"
            ],
            "itemtype": "method",
            "name": "importMetadata",
            "params": [
                {
                    "name": "exportedString",
                    "description": "A previously exported MetadataStore.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "This MetadataStore.",
                "type": "MetadataStore"
            },
            "chainable": 1,
            "class": "MetadataStore",
            "module": "entityModel"
        },
        {
            "file": "entityMetadata.js",
            "line": 246,
            "description": "Creates a new MetadataStore from a previously exported serialized MetadataStore",
            "example": [
                "\n    // assume ms is a previously created MetadataStore\n    var metadataAsString = ms.exportMetadata();\n    window.localStorage.setItem(\"metadata\", metadataAsString);\n    // and later, usually in a different session\n    var metadataFromStorage = window.localStorage.getItem(\"metadata\");\n    var newMetadataStore = MetadataStore.importMetadata(metadataFromStorage);"
            ],
            "itemtype": "method",
            "name": "importMetadata",
            "static": 1,
            "params": [
                {
                    "name": "exportedString",
                    "description": "A previously exported MetadataStore.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "A new MetadataStore.",
                "type": "MetadataStore"
            },
            "class": "MetadataStore",
            "module": "entityModel"
        },
        {
            "file": "entityMetadata.js",
            "line": 267,
            "description": "Returns whether Metadata has been retrieved for a specified service name.",
            "example": [
                "\n    // Assume em1 is an existing EntityManager.\n    if (!em1.metadataStore.hasMetadataFor(\"api/NorthwindIBModel\"))) {\n        // do something interesting\n    }"
            ],
            "itemtype": "method",
            "name": "hasMetadataFor",
            "params": [
                {
                    "name": "serviceName",
                    "description": "The service name.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "MetadataStore",
            "module": "entityModel"
        },
        {
            "file": "entityMetadata.js",
            "line": 286,
            "description": "Fetches the metadata for a specified 'service'. This method is automatically called \ninternally by an EntityManager before its first query against a new service.",
            "example": [
                "\nUsually you will not actually process the results of a fetchMetadata call directly, but will instead\nask for the metadata from the EntityManager after the fetchMetadata call returns.",
                "\n    var ms = new MetadataStore();\n    // or more commonly\n    // var ms = anEntityManager.metadataStore;\n    ms.fetchMetadata(\"api/NorthwindIBModel\")\n    .then(function(rawMetadata) {\n        // do something with the metadata\n    }\n    .fail(function(exception) {\n        // handle exception here\n    };"
            ],
            "itemtype": "method",
            "name": "fetchMetadata",
            "async": 1,
            "params": [
                {
                    "name": "serviceName",
                    "description": "The service name to fetch metadata for.",
                    "type": "String"
                },
                {
                    "name": "remoteAccessImplementation",
                    "description": "\n- will default to core.config.remoteAccessImplementation",
                    "type": "Instance of this RemoteAccessImplementation interface",
                    "optional": true
                },
                {
                    "name": "callback",
                    "description": "Function called on success.\n\n    successFunction([data])",
                    "type": "Function",
                    "optional": true,
                    "props": [
                        {
                            "name": "data",
                            "description": "",
                            "type": "RawMetadata",
                            "optional": true
                        }
                    ]
                },
                {
                    "name": "errorCallback",
                    "description": "Function called on failure.\n\n    failureFunction([error])",
                    "type": "Function",
                    "optional": true,
                    "props": [
                        {
                            "name": "error",
                            "description": "Any error that occured wrapped into an Error object.",
                            "type": "Error",
                            "optional": true
                        }
                    ]
                }
            ],
            "return": {
                "description": "Promise",
                "type": "Promise"
            },
            "class": "MetadataStore",
            "module": "entityModel"
        },
        {
            "file": "entityMetadata.js",
            "line": 349,
            "description": "Used to register a constructor for an EntityType that is not known via standard Metadata discovery; \ni.e. an unmapped type.",
            "itemtype": "method",
            "name": "trackUnmappedType",
            "params": [
                {
                    "name": "entityCtor",
                    "description": "The constructor for the 'unmapped' type.",
                    "type": "Function"
                },
                {
                    "name": "interceptor",
                    "description": "A function",
                    "type": "Function",
                    "optional": true
                }
            ],
            "class": "MetadataStore",
            "module": "entityModel"
        },
        {
            "file": "entityMetadata.js",
            "line": 365,
            "description": "Provides a mechanism to register a 'custom' constructor to be used when creating new instances\nof the specified entity type.  If this call is not made, a default constructor is created for\nthe entity as needed.\nThis call may be made before or after the corresponding EntityType has been discovered via\nMetadata discovery.",
            "example": [
                "\n    var Customer = function () {\n        this.miscData = \"asdf\";\n    };\n    Customer.prototype.doFoo() {\n        ...\n    }\n    // assume em1 is a preexisting EntityManager;\n    em1.metadataStore.registerEntityTypeCtor(\"Customer\", Customer);\n    // any queries or EntityType.create calls from this point on will call the Customer constructor\n    // registered above."
            ],
            "itemtype": "method",
            "name": "registerEntityTypeCtor",
            "params": [
                {
                    "name": "entityTypeName",
                    "description": "The name of the EntityType",
                    "type": "String"
                },
                {
                    "name": "entityCtor",
                    "description": "The constructor for this EntityType.",
                    "type": "Function"
                },
                {
                    "name": "initializationFn",
                    "description": "A function or the name of a function on the entity that is to be executed immediately after the entity has been created.\n    \ninitializationFn(entity)",
                    "type": "Function",
                    "optional": true,
                    "props": [
                        {
                            "name": "entity",
                            "description": "The entity being created or materialized.",
                            "type": "Entity"
                        }
                    ]
                }
            ],
            "class": "MetadataStore",
            "module": "entityModel"
        },
        {
            "file": "entityMetadata.js",
            "line": 413,
            "description": "Returns whether this MetadataStore contains any metadata yet.",
            "example": [
                "\n    // assume em1 is a preexisting EntityManager;\n    if (em1.metadataStore.isEmpty()) {\n        // do something interesting\n    }"
            ],
            "itemtype": "method",
            "name": "isEmpty",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "MetadataStore",
            "module": "entityModel"
        },
        {
            "file": "entityMetadata.js",
            "line": 428,
            "description": "Returns an  {{#crossLink \"EntityType\"}}{{/crossLink}} given its name.",
            "example": [
                "\n    // assume em1 is a preexisting EntityManager\n    var odType = em1.metadataStore.getEntityType(\"OrderDetail\");\nor to throw an error if the type is not found",
                "\n    var badType = em1.metadataStore.getEntityType(\"Foo\", false);\n    // badType will not get set and an exception will be thrown."
            ],
            "itemtype": "method",
            "name": "getEntityType",
            "params": [
                {
                    "name": "entityTypeName",
                    "description": "Either the fully qualified name or a short name may be used. If a short name is specified and multiple types share\nthat same short name an exception will be thrown.",
                    "type": "String"
                },
                {
                    "name": "okIfNotFound",
                    "description": "Whether to throw an error if the specified EntityType is not found.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "return": {
                "description": "The EntityType or 'undefined' if not not found.",
                "type": "EntityType"
            },
            "class": "MetadataStore",
            "module": "entityModel"
        },
        {
            "file": "entityMetadata.js",
            "line": 459,
            "description": "Returns an array containing all of the  {{#crossLink \"EntityType\"}}{{/crossLink}}s in this MetadataStore.",
            "example": [
                "\n    // assume em1 is a preexisting EntityManager\n    var allTypes = em1.metadataStore.getEntityTypes();"
            ],
            "itemtype": "method",
            "name": "getEntityTypes",
            "return": {
                "description": "",
                "type": "Array of EntityType"
            },
            "class": "MetadataStore",
            "module": "entityModel"
        },
        {
            "file": "entityMetadata.js",
            "line": 776,
            "example": [
                "                    \n    var entityManager = new EntityType( {\n        metadataStore: myMetadataStore,\n        serviceName: \"api/NorthwindIBModel\",\n        name: \"person\",\n        namespace: \"myAppNamespace\"\n     });"
            ],
            "itemtype": "method",
            "name": "<ctor> EntityType",
            "params": [
                {
                    "name": "config",
                    "description": "Configuration settings or a MetadataStore.  If this parameter is just a MetadataStore\nthen what will be created is an 'anonymous' type that will never be communicated to or from the server. It is purely for\nclient side use and will be given an automatically generated name. Normally, however, you will use a configuration object.",
                    "type": "Object|MetadataStore",
                    "props": [
                        {
                            "name": "metadataStore",
                            "description": "The MetadataStore that will contain this EntityType.",
                            "type": "MetadataStore"
                        },
                        {
                            "name": "serviceName",
                            "description": "",
                            "type": "String"
                        },
                        {
                            "name": "shortName",
                            "description": "",
                            "type": "String"
                        },
                        {
                            "name": "namespace",
                            "description": "",
                            "type": "String",
                            "optional": true,
                            "optdefault": "\"\""
                        },
                        {
                            "name": "defaultResourceName",
                            "description": "",
                            "type": "String",
                            "optional": true
                        }
                    ]
                }
            ],
            "class": "EntityType",
            "module": "entityModel"
        },
        {
            "file": "entityMetadata.js",
            "line": 849,
            "description": "The {{#crossLink \"MetadataStore\"}}{{/crossLink}} that contains this EntityType\n\n__readOnly__",
            "itemtype": "property",
            "name": "metadataStore",
            "type": "MetadataStore",
            "class": "EntityType",
            "module": "entityModel"
        },
        {
            "file": "entityMetadata.js",
            "line": 856,
            "description": "The DataProperties (see {{#crossLink \"DataProperty\"}}{{/crossLink}}) associated with this EntityType.\n\n__readOnly__",
            "itemtype": "property",
            "name": "dataProperties",
            "type": "Array of DataProperty",
            "class": "EntityType",
            "module": "entityModel"
        },
        {
            "file": "entityMetadata.js",
            "line": 863,
            "description": "The NavigationProperties  (see {{#crossLink \"NavigationProperty\"}}{{/crossLink}}) associated with this EntityType.\n\n__readOnly__",
            "itemtype": "property",
            "name": "navigationProperties",
            "type": "Array of NavigationProperty",
            "class": "EntityType",
            "module": "entityModel"
        },
        {
            "file": "entityMetadata.js",
            "line": 870,
            "description": "The DataProperties associated with this EntityType that make up it's {{#crossLink \"EntityKey\"}}{{/crossLink}}.\n\n__readOnly__",
            "itemtype": "property",
            "name": "keyProperties",
            "type": "Array of DataProperty",
            "class": "EntityType",
            "module": "entityModel"
        },
        {
            "file": "entityMetadata.js",
            "line": 877,
            "description": "The DataProperties associated with this EntityType that are foreign key properties.\n\n__readOnly__",
            "itemtype": "property",
            "name": "foreignKeyProperties",
            "type": "Array of DataProperty",
            "class": "EntityType",
            "module": "entityModel"
        },
        {
            "file": "entityMetadata.js",
            "line": 884,
            "description": "The DataProperties associated with this EntityType that are concurrency properties.\n\n__readOnly__",
            "itemtype": "property",
            "name": "concurrencyProperties",
            "type": "Array of DataProperty",
            "class": "EntityType",
            "module": "entityModel"
        },
        {
            "file": "entityMetadata.js",
            "line": 891,
            "description": "The DataProperties associated with this EntityType that are not mapped to any backend datastore. These are effectively free standing\nproperties.\n\n__readOnly__",
            "itemtype": "property",
            "name": "unmappedProperties",
            "type": "Array of DataProperty",
            "class": "EntityType",
            "module": "entityModel"
        },
        {
            "file": "entityMetadata.js",
            "line": 899,
            "description": "The default resource name associated with this EntityType.  An EntityType may be queried via a variety of 'resource names' but this one \nis used as the default when no resource name is provided.  This will occur when calling {{#crossLink \"EntityAspect/loadNavigationProperty\"}}{{/crossLink}}\nor when executing any {{#crossLink \"EntityQuery\"}}{{/crossLink}} that was created via an {{#crossLink \"EntityKey\"}}{{/crossLink}}.\n\n__readOnly__",
            "itemtype": "property",
            "name": "defaultResourceName",
            "type": "String",
            "class": "EntityType",
            "module": "entityModel"
        },
        {
            "file": "entityMetadata.js",
            "line": 908,
            "description": "The fully qualifed name of this EntityType.\n\n__readOnly__",
            "itemtype": "property",
            "name": "name",
            "type": "String",
            "class": "EntityType",
            "module": "entityModel"
        },
        {
            "file": "entityMetadata.js",
            "line": 915,
            "description": "The short, unqualified, name for this EntityType.\n\n__readOnly__",
            "itemtype": "property",
            "name": "shortName",
            "type": "String",
            "class": "EntityType",
            "module": "entityModel"
        },
        {
            "file": "entityMetadata.js",
            "line": 922,
            "description": "The namespace for this EntityType.\n\n__readOnly__",
            "itemtype": "property",
            "name": "namespace",
            "type": "String",
            "class": "EntityType",
            "module": "entityModel"
        },
        {
            "file": "entityMetadata.js",
            "line": 929,
            "description": "The {{#crossLink \"AutoGeneratedKeyType\"}}{{/crossLink}} for this EntityType.\n\n__readOnly__",
            "itemtype": "property",
            "name": "autoGeneratedKeyType",
            "type": "AutoGeneratedKeyType",
            "default": "AutoGeneratedKeyType.None",
            "class": "EntityType",
            "module": "entityModel"
        },
        {
            "file": "entityMetadata.js",
            "line": 937,
            "description": "The entity level validators associated with this EntityType. Validators can be added and\nremoved from this collection.\n\n__readOnly__",
            "itemtype": "property",
            "name": "validators",
            "type": "Array of Validator",
            "class": "EntityType",
            "module": "entityModel"
        },
        {
            "file": "entityMetadata.js",
            "line": 948,
            "description": "General purpose property set method",
            "example": [
                "\n    // assume em1 is an EntityManager containing a number of existing entities.\n    var custType = em1.metadataStore.getEntityType(\"Customer\");\n    custType.setProperties( {\n        autoGeneratedKeyType: AutoGeneratedKeyType.Identity;\n        defaultResourceName: \"CustomersAndIncludedOrders\"\n    )};"
            ],
            "itemtype": "method",
            "name": "setProperties",
            "params": [
                {
                    "name": "config",
                    "description": "[object]",
                    "props": [
                        {
                            "name": "autogeneratedKeyType",
                            "description": "",
                            "type": "AutoGeneratedKeyType",
                            "optional": true
                        },
                        {
                            "name": "defaultResourceName",
                            "description": "",
                            "type": "String",
                            "optional": true
                        }
                    ]
                }
            ],
            "class": "EntityType",
            "module": "entityModel"
        },
        {
            "file": "entityMetadata.js",
            "line": 972,
            "description": "Adds a  {{#crossLink \"DataProperty\"}}{{/crossLink}} or a {{#crossLink \"NavigationProperty\"}}{{/crossLink}} to this EntityType.",
            "example": [
                "\n    // assume myEntityType is a newly constructed EntityType. \n    myEntityType.addProperty(dataProperty1);\n    myEntityType.addProperty(dataProperty2);\n    myEntityType.addProperty(navigationProperty1);"
            ],
            "itemtype": "method",
            "name": "addProperty",
            "params": [
                {
                    "name": "property",
                    "description": "",
                    "type": "DataProperty|NavigationProperty"
                }
            ],
            "class": "EntityType",
            "module": "entityModel"
        },
        {
            "file": "entityMetadata.js",
            "line": 996,
            "description": "Create a new entity of this type.",
            "example": [
                "\n    // assume em1 is an EntityManager containing a number of existing entities.\n    var custType = em1.metadataStore.getEntityType(\"Customer\");\n    var cust1 = custType.createEntity();\n    em1.addEntity(cust1);"
            ],
            "itemtype": "method",
            "name": "createEntity",
            "return": {
                "description": "The new entity.",
                "type": "Entity"
            },
            "class": "EntityType",
            "module": "entityModel"
        },
        {
            "file": "entityMetadata.js",
            "line": 1017,
            "description": "Returns the constructor for this EntityType.",
            "itemtype": "method",
            "name": "getEntityCtor",
            "return": {
                "description": "The constructor for this EntityType.",
                "type": "Function"
            },
            "class": "EntityType",
            "module": "entityModel"
        },
        {
            "file": "entityMetadata.js",
            "line": 1060,
            "description": "Adds either an entity or property level validator to this EntityType.",
            "example": [
                "\n    // assume em1 is an EntityManager containing a number of existing entities.\n    var custType = em1.metadataStore.getEntityType(\"Customer\");\n    var countryProp = custType.getProperty(\"Country\");\n    var valFn = function (v) {\n        if (v == null) return true;\n        return (core.stringStartsWith(v, \"US\"));\n    };\n    var countryValidator = new Validator(\"countryIsUS\", valFn, \n        { displayName: \"Country\", messageTemplate: \"'%displayName%' must start with 'US'\" });\n    custType.addValidator(countryValidator, countryProp);\nThis is the same as adding an entity level validator via the 'validators' property of DataProperty or NavigationProperty",
                "\n    countryProp.validators.push(countryValidator);\nEntity level validators can also be added by omitting the 'property' parameter.",
                "\n    custType.addValidator(someEntityLevelValidator);\nor",
                "\n    custType.validators.push(someEntityLevelValidator);"
            ],
            "itemtype": "method",
            "name": "addValidator",
            "params": [
                {
                    "name": "validator",
                    "description": "Validator to add.",
                    "type": "Validator"
                },
                {
                    "name": "property",
                    "description": "Property to add this validator to.  If omitted, the validator is assumed to be an\nentity level validator and is added to the EntityType's 'validators'.",
                    "optional": true
                }
            ],
            "class": "EntityType",
            "module": "entityModel"
        },
        {
            "file": "entityMetadata.js",
            "line": 1100,
            "description": "Returns all of the properties ( dataProperties and navigationProperties) for this EntityType.",
            "example": [
                "\n    // assume em1 is an EntityManager containing a number of existing entities.\n    var custType = em1.metadataStore.getEntityType(\"Customer\");\n    var arrayOfProps = custType.getProperties();"
            ],
            "itemtype": "method",
            "name": "getProperties",
            "return": {
                "description": "Array of Data and Navigation properties.",
                "type": "Array of DataProperty|NavigationProperty"
            },
            "class": "EntityType",
            "module": "entityModel"
        },
        {
            "file": "entityMetadata.js",
            "line": 1113,
            "description": "Returns all of the property names ( for both dataProperties and navigationProperties) for this EntityType.",
            "example": [
                "\n    // assume em1 is an EntityManager containing a number of existing entities.\n    var custType = em1.metadataStore.getEntityType(\"Customer\");\n    var arrayOfPropNames = custType.getPropertyNames();"
            ],
            "itemtype": "method",
            "name": "getPropertyNames",
            "return": {
                "description": "",
                "type": "Array of String"
            },
            "class": "EntityType",
            "module": "entityModel"
        },
        {
            "file": "entityMetadata.js",
            "line": 1126,
            "description": "Returns a data property with the specified name or null.",
            "example": [
                "\n    // assume em1 is an EntityManager containing a number of existing entities.\n    var custType = em1.metadataStore.getEntityType(\"Customer\");\n    var customerNameDataProp = custType.getDataProperty(\"CustomerName\");"
            ],
            "itemtype": "method",
            "name": "getDataProperty",
            "params": [
                {
                    "name": "propertyName",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Will be null if not found.",
                "type": "DataProperty"
            },
            "class": "EntityType",
            "module": "entityModel"
        },
        {
            "file": "entityMetadata.js",
            "line": 1141,
            "description": "Returns a navigation property with the specified name or null.",
            "example": [
                "\n    // assume em1 is an EntityManager containing a number of existing entities.\n    var custType = em1.metadataStore.getEntityType(\"Customer\");\n    var customerOrdersNavProp = custType.getDataProperty(\"Orders\");"
            ],
            "itemtype": "method",
            "name": "getNavigationProperty",
            "params": [
                {
                    "name": "propertyName",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Will be null if not found.",
                "type": "NavigationProperty"
            },
            "class": "EntityType",
            "module": "entityModel"
        },
        {
            "file": "entityMetadata.js",
            "line": 1156,
            "description": "Returns either a DataProperty or a NavigationProperty with the specified name or null.  \n\nThis method also accepts a '.' delimited property path and will return the 'property' at the \nend of the path.",
            "example": [
                "\n    var custType = em1.metadataStore.getEntityType(\"Customer\");\n    var companyNameProp = custType.getProperty(\"CompanyName\");\nThis method can also walk a property path to return a property",
                "\n    var orderDetailType = em1.metadataStore.getEntityType(\"OrderDetail\");\n    var companyNameProp2 = orderDetailType.getProperty(\"Order.Customer.CompanyName\");\n    // companyNameProp === companyNameProp2 "
            ],
            "itemtype": "method",
            "name": "getProperty",
            "params": [
                {
                    "name": "propertyPath",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "throwIfNotFound",
                    "description": "Whether to throw an exception if not found.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "return": {
                "description": "Will be null if not found.",
                "type": "DataProperty|NavigationProperty"
            },
            "class": "EntityType",
            "module": "entityModel"
        },
        {
            "file": "entityMetadata.js",
            "line": 1203,
            "description": "Returns a string representation of this EntityType.",
            "itemtype": "method",
            "name": "toString",
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "EntityType",
            "module": "entityModel"
        },
        {
            "file": "entityMetadata.js",
            "line": 1345,
            "example": [
                "                    \n    var lastNameProp = new DataProperty( {\n        name: \"lastName\",\n        dataType: DataType.String,\n        isNullable: true,\n        maxLength: 20\n    });\n    // assuming personEntityType is a newly constructed EntityType\n    personEntityType.addProperty(lastNameProperty);"
            ],
            "itemtype": "method",
            "name": "<ctor> DataProperty",
            "params": [
                {
                    "name": "config",
                    "description": "",
                    "type": "Configuration Object",
                    "props": [
                        {
                            "name": "name",
                            "description": "The name of this property.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "nameOnServer",
                            "description": "Same as above but the name is that defined on the server.\nEither this or the 'name' above must be specified. Whichever one is specified the other will be computed using\nthe NamingConvention on the MetadataStore associated with the EntityType to which this will be added.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "dataType",
                            "description": "",
                            "type": "DataType",
                            "optional": true,
                            "optdefault": "DataType.String"
                        },
                        {
                            "name": "isNullable",
                            "description": "",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "isPartOfKey",
                            "description": "",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "isUnmapped",
                            "description": "",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "concurrencyMode",
                            "description": "",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "maxLength",
                            "description": "Only meaningfull for DataType.String",
                            "type": "Integer",
                            "optional": true
                        },
                        {
                            "name": "fixedLength",
                            "description": "Only meaningfull for DataType.String",
                            "type": "Boolean",
                            "optional": true
                        },
                        {
                            "name": "validators",
                            "description": "",
                            "type": "Array of Validator",
                            "optional": true
                        }
                    ]
                }
            ],
            "class": "DataProperty",
            "module": "entityModel"
        },
        {
            "file": "entityMetadata.js",
            "line": 1429,
            "description": "The name of this property\n\n__readOnly__",
            "itemtype": "property",
            "name": "name",
            "type": "String",
            "class": "DataProperty",
            "module": "entityModel"
        },
        {
            "file": "entityMetadata.js",
            "line": 1436,
            "description": "The {{#crossLink \"EntityType\"}}{{/crossLink}} that this property belongs to.\n\n__readOnly__",
            "itemtype": "property",
            "name": "parentEntityType",
            "type": "EntityType",
            "class": "DataProperty",
            "module": "entityModel"
        },
        {
            "file": "entityMetadata.js",
            "line": 1443,
            "description": "The {{#crossLink \"DataType\"}}{{/crossLink}} of this property.\n\n__readOnly__",
            "itemtype": "property",
            "name": "dataType",
            "type": "DataType",
            "class": "DataProperty",
            "module": "entityModel"
        },
        {
            "file": "entityMetadata.js",
            "line": 1450,
            "description": "Whether this property is nullable. \n\n__readOnly__",
            "itemtype": "property",
            "name": "isNullable",
            "type": "Boolean",
            "class": "DataProperty",
            "module": "entityModel"
        },
        {
            "file": "entityMetadata.js",
            "line": 1457,
            "description": "Whether this property is a 'key' property. \n\n__readOnly__",
            "itemtype": "property",
            "name": "isPartOfKey",
            "type": "Boolean",
            "class": "DataProperty",
            "module": "entityModel"
        },
        {
            "file": "entityMetadata.js",
            "line": 1464,
            "description": "Whether this property is an 'unmapped' property. \n\n__readOnly__",
            "itemtype": "property",
            "name": "isUnmapped",
            "type": "Boolean",
            "class": "DataProperty",
            "module": "entityModel"
        },
        {
            "file": "entityMetadata.js",
            "line": 1471,
            "description": "__Describe this__\n\n__readOnly__",
            "itemtype": "property",
            "name": "concurrencyMode",
            "type": "String",
            "class": "DataProperty",
            "module": "entityModel"
        },
        {
            "file": "entityMetadata.js",
            "line": 1478,
            "description": "The maximum length for the value of this property.\n\n__readOnly__",
            "itemtype": "property",
            "name": "maxLength",
            "type": "Number",
            "class": "DataProperty",
            "module": "entityModel"
        },
        {
            "file": "entityMetadata.js",
            "line": 1485,
            "description": "Whether this property is of 'fixed' length or not.\n\n__readOnly__",
            "itemtype": "property",
            "name": "fixedLength",
            "type": "Boolean",
            "class": "DataProperty",
            "module": "entityModel"
        },
        {
            "file": "entityMetadata.js",
            "line": 1492,
            "description": "The {{#crossLink \"Validator\"}}{{/crossLink}}s that are associated with this property. Validators can be added and\nremoved from this collection.\n\n__readOnly__",
            "itemtype": "property",
            "name": "validators",
            "type": "Array of Validator",
            "class": "DataProperty",
            "module": "entityModel"
        },
        {
            "file": "entityMetadata.js",
            "line": 1500,
            "description": "The default value for this property.\n\n__readOnly__",
            "itemtype": "property",
            "name": "defaultValue",
            "type": "Any",
            "class": "DataProperty",
            "module": "entityModel"
        },
        {
            "file": "entityMetadata.js",
            "line": 1507,
            "description": "The navigation property related to this property.  Will only be set if this is a foreign key property. \n\n__readOnly__",
            "itemtype": "property",
            "name": "relatedNavigationProperty",
            "type": "NavigationProperty",
            "class": "DataProperty",
            "module": "entityModel"
        },
        {
            "file": "entityMetadata.js",
            "line": 1557,
            "example": [
                "                    \n    var homeAddressProp = new NavigationProperty( {\n        name: \"homeAddress\",\n        entityTypeName: \"Address:#myNamespace\",\n        isScalar: true,\n        associationName: \"address_person\",\n        foreignKeyNames: [\"homeAddressId\"]\n    });\n    var homeAddressIdProp = new DataProperty( {\n        name: \"homeAddressId\"\n        dataType: DataType.Integer,\n    });\n    // assuming personEntityType is a newly constructed EntityType\n    personEntityType.addProperty(homeAddressProp);\n    personEntityType.addProperty(homeAddressIdProp);"
            ],
            "itemtype": "method",
            "name": "<ctor> NavigationProperty",
            "params": [
                {
                    "name": "config",
                    "description": "",
                    "type": "Configuration Object",
                    "props": [
                        {
                            "name": "name",
                            "description": "The name of this property.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "nameOnServer",
                            "description": "Same as above but the name is that defined on the server.\nEither this or the 'name' above must be specified. Whichever one is specified the other will be computed using\nthe NamingConvention on the MetadataStore associated with the EntityType to which this will be added.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "entityTypeName",
                            "description": "The fully qualified name of the type of entity that this property will return.  This type\nneed not yet have been created, but it will need to get added to the relevant MetadataStore before this EntityType will be 'complete'.\nThe entityType name is constructed as: {shortName} + \":#\" + {namespace}",
                            "type": "String"
                        },
                        {
                            "name": "isScalar",
                            "description": "",
                            "type": "Boolean",
                            "optional": true
                        },
                        {
                            "name": "associationName",
                            "description": "A name that will be used to connect the two sides of a navigation. May be omitted for unidirectional navigations.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "foreignKeyNames",
                            "description": "An array of foreign key names. The array is needed to support the possibility of multipart foreign keys.\nMost of the time this will be a single foreignKeyName in an array.",
                            "type": "Array of String",
                            "optional": true
                        },
                        {
                            "name": "foreignKeyNamesOnServer",
                            "description": "Same as above but the names are those defined on the server. Either this or 'foreignKeyNames' must\nbe specified, if there are foreignKeys. Whichever one is specified the other will be computed using\nthe NamingConvention on the MetadataStore associated with the EntityType to which this will be added.",
                            "type": "Array of String",
                            "optional": true
                        },
                        {
                            "name": "validators",
                            "description": "",
                            "type": "Array of Validator",
                            "optional": true
                        }
                    ]
                }
            ],
            "class": "NavigationProperty",
            "module": "entityModel"
        },
        {
            "file": "entityMetadata.js",
            "line": 1610,
            "description": "The {{#crossLink \"EntityType\"}}{{/crossLink}} that this property belongs to.\n__readOnly__",
            "itemtype": "property",
            "name": "parentEntityType",
            "type": "EntityType",
            "class": "NavigationProperty",
            "module": "entityModel"
        },
        {
            "file": "entityMetadata.js",
            "line": 1616,
            "description": "The name of this property\n\n__readOnly__",
            "itemtype": "property",
            "name": "name",
            "type": "String",
            "class": "NavigationProperty",
            "module": "entityModel"
        },
        {
            "file": "entityMetadata.js",
            "line": 1623,
            "description": "The {{#crossLink \"EntityType\"}}{{/crossLink}} returned by this property.\n\n__readOnly__",
            "itemtype": "property",
            "name": "entityType",
            "type": "EntityType",
            "class": "NavigationProperty",
            "module": "entityModel"
        },
        {
            "file": "entityMetadata.js",
            "line": 1630,
            "description": "Whether this property returns a single entity or an array of entities.\n\n__readOnly__",
            "itemtype": "property",
            "name": "isScalar",
            "type": "Boolean",
            "class": "NavigationProperty",
            "module": "entityModel"
        },
        {
            "file": "entityMetadata.js",
            "line": 1637,
            "description": "The name of the association to which that this property belongs.  This associationName will be shared with this \nproperties 'inverse'.\n\n__readOnly__",
            "itemtype": "property",
            "name": "associationName",
            "type": "String",
            "class": "NavigationProperty",
            "module": "entityModel"
        },
        {
            "file": "entityMetadata.js",
            "line": 1645,
            "description": "The names of the foreign key DataProperties associated with this NavigationProperty. There will usually only be a single DataProperty associated \nwith a Navigation property except in the case of entities with multipart keys.\n\n__readOnly__",
            "itemtype": "property",
            "name": "foreignKeyNames",
            "type": "Array of String",
            "class": "NavigationProperty",
            "module": "entityModel"
        },
        {
            "file": "entityMetadata.js",
            "line": 1653,
            "description": "The 'foreign key' DataProperties associated with this NavigationProperty. There will usually only be a single DataProperty associated \nwith a Navigation property except in the case of entities with multipart keys.\n\n__readOnly__",
            "itemtype": "property",
            "name": "relatedDataProperties",
            "type": "Array of DataProperty",
            "class": "NavigationProperty",
            "module": "entityModel"
        },
        {
            "file": "entityMetadata.js",
            "line": 1661,
            "description": "The inverse of this NavigationProperty.  The NavigationProperty that represents a navigation in the opposite direction\nto this NavigationProperty.\n\n__readOnly__",
            "itemtype": "property",
            "name": "inverse",
            "type": "NavigationProperty",
            "class": "NavigationProperty",
            "module": "entityModel"
        },
        {
            "file": "entityMetadata.js",
            "line": 1669,
            "description": "The {{#crossLink \"Validator\"}}{{/crossLink}}s that are associated with this property. Validators can be added and\nremoved from this collection.\n\n__readOnly__",
            "itemtype": "property",
            "name": "validators",
            "type": "Array of Validator",
            "class": "NavigationProperty",
            "module": "entityModel"
        },
        {
            "file": "entityMetadata.js",
            "line": 1677,
            "description": "Is this a DataProperty? - always false here \nAllows polymorphic treatment of DataProperties and NavigationProperties.\n\n__readOnly__",
            "itemtype": "property",
            "name": "isDataProperty",
            "type": "Boolean",
            "class": "NavigationProperty",
            "module": "entityModel"
        },
        {
            "file": "entityMetadata.js",
            "line": 1685,
            "description": "Is this a NavigationProperty? - always true here \nAllows polymorphic treatment of DataProperties and NavigationProperties.\n\n__readOnly__",
            "itemtype": "property",
            "name": "isNavigationProperty",
            "type": "Boolean",
            "class": "NavigationProperty",
            "module": "entityModel"
        },
        {
            "file": "entityMetadata.js",
            "line": 1858,
            "description": "This entity does not have an autogenerated key. \nThe client must set the key before adding the entity to the EntityManager",
            "itemtype": "property",
            "name": "None",
            "type": "AutoGeneratedKeyType",
            "final": 1,
            "static": 1,
            "class": "AutoGeneratedKeyType",
            "module": "entityModel"
        },
        {
            "file": "entityMetadata.js",
            "line": 1866,
            "description": "This entity's key is an Identity column and is set by the backend database. \nKeys for new entities will be temporary until the entities are saved at which point the keys will\nbe converted to their 'real' versions.",
            "itemtype": "property",
            "name": "Identity",
            "type": "AutoGeneratedKeyType",
            "final": 1,
            "static": 1,
            "class": "AutoGeneratedKeyType",
            "module": "entityModel"
        },
        {
            "file": "entityMetadata.js",
            "line": 1875,
            "description": "This entity's key is generated by a KeyGenerator and is set by the backend database. \nKeys for new entities will be temporary until the entities are saved at which point the keys will\nbe converted to their 'real' versions.",
            "itemtype": "property",
            "name": "KeyGenerator",
            "type": "AutoGeneratedKeyType",
            "final": 1,
            "static": 1,
            "class": "AutoGeneratedKeyType",
            "module": "entityModel"
        },
        {
            "file": "entityQuery.js",
            "line": 29,
            "example": [
                "                    \n    var query = new EntityQuery(\"Customers\")\n\nUsually this constructor will be followed by calls to filtering, ordering or selection methods",
                "\n    var query = new EntityQuery(\"Customers\")\n       .where(\"CompanyName\", \"startsWith\", \"C\")\n       .orderBy(\"Region\");"
            ],
            "itemtype": "method",
            "name": "<ctor> EntityQuery",
            "params": [
                {
                    "name": "resourceName",
                    "description": "",
                    "type": "String",
                    "optional": true
                }
            ],
            "class": "EntityQuery",
            "module": "entityModel"
        },
        {
            "file": "entityQuery.js",
            "line": 57,
            "description": "The resource name used by this query.\n\n__readOnly__",
            "itemtype": "property",
            "name": "resourceName",
            "type": "String",
            "class": "EntityQuery",
            "module": "entityModel"
        },
        {
            "file": "entityQuery.js",
            "line": 64,
            "description": "The 'where' predicate used by this query.\n\n__readOnly__",
            "itemtype": "property",
            "name": "wherePredicate",
            "type": "Predicate",
            "class": "EntityQuery",
            "module": "entityModel"
        },
        {
            "file": "entityQuery.js",
            "line": 71,
            "description": "The {{#crossLink \"OrderByClause\"}}{{/crossLink}} used by this query.\n\n__readOnly__",
            "itemtype": "property",
            "name": "orderByClause",
            "type": "OrderByClause",
            "class": "EntityQuery",
            "module": "entityModel"
        },
        {
            "file": "entityQuery.js",
            "line": 78,
            "description": "The number of entities to 'skip' for this query.\n\n__readOnly__",
            "itemtype": "property",
            "name": "skipCount",
            "type": "Integer",
            "class": "EntityQuery",
            "module": "entityModel"
        },
        {
            "file": "entityQuery.js",
            "line": 85,
            "description": "The number of entities to 'take' for this query.\n\n__readOnly__",
            "itemtype": "property",
            "name": "takeCount",
            "type": "Integer",
            "class": "EntityQuery",
            "module": "entityModel"
        },
        {
            "file": "entityQuery.js",
            "line": 92,
            "description": "The {{#crossLink \"QueryOptions\"}}{{/crossLink}} for this query.\n\n__readOnly__",
            "itemtype": "property",
            "name": "queryOptions",
            "type": "QueryOptions",
            "class": "EntityQuery",
            "module": "entityModel"
        },
        {
            "file": "entityQuery.js",
            "line": 99,
            "description": "The {{#crossLink \"EntityManager\"}}{{/crossLink}} for this query. This may be null and can be set via the 'using' method.\n\n__readOnly__",
            "itemtype": "property",
            "name": "entityManager",
            "type": "EntityManager",
            "class": "EntityQuery",
            "module": "entityModel"
        },
        {
            "file": "entityQuery.js",
            "line": 147,
            "description": "Specifies the resource to query for this EntityQuery.",
            "example": [
                "                    \n    var query = new EntityQuery()\n        .from(\"Customers\");\nis the same as ",
                "\n    var query = new EntityQuery(\"Customers\");"
            ],
            "itemtype": "method",
            "name": "from",
            "params": [
                {
                    "name": "resourceName",
                    "description": "The resource to query.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "EntityQuery"
            },
            "chainable": 1,
            "class": "EntityQuery",
            "module": "entityModel"
        },
        {
            "file": "entityQuery.js",
            "line": 173,
            "description": "This is a static version of the \"from\" method and it creates a 'base' entityQuery for the specified resource name.",
            "example": [
                "                    \n    var query = EntityQuery.from(\"Customers\");\nis the same as ",
                "\n    var query = new EntityQuery(\"Customers\");"
            ],
            "itemtype": "method",
            "name": "from",
            "static": 1,
            "params": [
                {
                    "name": "resourceName",
                    "description": "The resource to query.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "EntityQuery"
            },
            "chainable": 1,
            "class": "EntityQuery",
            "module": "entityModel"
        },
        {
            "file": "entityQuery.js",
            "line": 192,
            "description": "Adds a filter to the query. Can be called multiple times which means to 'and' with any existing Predicate.",
            "example": [
                "                    \n    var query = new EntityQuery(\"Customers\")\n        .where(\"CompanyName\", \"startsWith\", \"C\");\nThis can also be expressed using an explicit {{#crossLink \"FilterQueryOp\"}}{{/crossLink}} as",
                "\n    var query = new EntityQuery(\"Customers\")\n        .where(\"CompanyName\", FilterQueryOp.StartsWith, \"C\");\nor a preconstructed {{#crossLink \"Predicate\"}}{{/crossLink}} may be used",
                "\n    var pred = new Predicate(\"CompanyName\", FilterQueryOp.StartsWith, \"C\");\n    var query = new EntityQuery(\"Customers\")\n        .where(pred);\nPredicates are often useful when you want to combine multiple conditions in a single filter, such as",
                "\n    var pred = Predicate.create(\"CompanyName\", \"startswith\", \"C\").and(\"Region\", FilterQueryOp.Equals, null);\n    var query = new EntityQuery(\"Customers\")\n        .where(pred);",
                "\nMore complicated queries can make use of nested property paths",
                "\n    var query = new EntityQuery(\"Products\")\n        .where(\"Category.CategoryName\", \"startswith\", \"S\");\nor OData functions - A list of valid OData functions can be found within the {{#crossLink \"Predicate\"}}{{/crossLink}} documentation.",
                "\n    var query = new EntityQuery(\"Customers\")\n        .where(\"toLower(CompanyName)\", \"startsWith\", \"c\");\nor to be even more baroque",
                "\n    var query = new EntityQuery(\"Customers\")\n       .where(\"toUpper(substring(CompanyName, 1, 2))\", FilterQueryOp.Equals, \"OM\");"
            ],
            "itemtype": "method",
            "name": "where",
            "params": [
                {
                    "name": "predicate",
                    "description": "Can be either\n\n- a single {{#crossLink \"Predicate\"}}{{/crossLink}}\n\n- or the parameters to create a 'simple' Predicate\n\n    - a property name, a property path with '.' as path seperators or a property expression {String}\n    - an operator {FilterQueryOp|String} Either a  {{#crossLink \"FilterQueryOp\"}}{{/crossLink}} or it's string representation. Case is ignored\n    when if a string is provided and any string that matches one of the FilterQueryOp aliases will be accepted.\n    - a value",
                    "type": "Predicate|property|property path, operator, value"
                }
            ],
            "return": {
                "description": "",
                "type": "EntityQuery"
            },
            "chainable": 1,
            "class": "EntityQuery",
            "module": "entityModel"
        },
        {
            "file": "entityQuery.js",
            "line": 260,
            "description": "Returns a query that orders the results of the query by property name.  By default sorting occurs is ascending order, but sorting in descending order is supported as well.",
            "example": [
                "\n     var query = new EntityQuery(\"Customers\")\n         .orderBy(\"CompanyName\");\n\nor to sort across multiple properties",
                "\n     var query = new EntityQuery(\"Customers\")\n         .orderBy(\"Region, CompanyName\");\n\nNested property paths are also supported",
                "\n     var query = new EntityQuery(\"Products\")\n        .orderBy(\"Category.CategoryName\");\n\nSorting in descending order is supported via the addition of ' desc' to the end of any property path.",
                "\n     var query = new EntityQuery(\"Customers\")\n        .orderBy(\"CompanyName desc\");\n\nor",
                "\n     var query = new EntityQuery(\"Customers\")\n        .orderBy(\"Region desc, CompanyName desc\");"
            ],
            "itemtype": "method",
            "name": "orderBy",
            "params": [
                {
                    "name": "propertyPaths",
                    "description": "A list of property paths seperated by ','. Each property path can optionally end with \" desc\" to force a descending sort order.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "EntityQuery"
            },
            "chainable": 1,
            "class": "EntityQuery",
            "module": "entityModel"
        },
        {
            "file": "entityQuery.js",
            "line": 296,
            "description": "Returns a query that orders the results of the query by property name in descending order.",
            "example": [
                "\n     var query = new EntityQuery(\"Customers\")\n         .orderByDesc(\"CompanyName\");\n\nor to sort across multiple properties",
                "\n     var query = new EntityQuery(\"Customers\")\n         .orderByDesc(\"Region, CompanyName\");\n\nNested property paths are also supported",
                "\n     var query = new EntityQuery(\"Products\")\n        .orderByDesc(\"Category.CategoryName\");"
            ],
            "itemtype": "method",
            "name": "orderByDesc",
            "params": [
                {
                    "name": "propertyPaths",
                    "description": "A list of property paths seperated by ','.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "EntityQuery"
            },
            "chainable": 1,
            "class": "EntityQuery",
            "module": "entityModel"
        },
        {
            "file": "entityQuery.js",
            "line": 322,
            "description": "Returns a query that selects a list of properties from the results of the original query and returns the values of just these properties. This\nwill be referred to as a projection. \nIf the result of this selection \"projection\" contains entities, these entities will automatically be added to EntityManager's cache and will \nbe made 'observable'.\nAny simple properties, i.e. strings, numbers or dates within a projection will not be cached are will NOT be made 'observable'.",
            "example": [
                "\nSimple data properties can be projected",
                "\n    var query = new EntityQuery(\"Customers\")\n        .where(\"CompanyName\", \"startsWith\", \"C\")\n        .select(\"CompanyName\");\nThis will return an array of objects each with a single \"CompanyName\" property of type string.\nA similar query could return a navigation property instead",
                "\n    var query = new EntityQuery(\"Customers\")\n        .where(\"CompanyName\", \"startsWith\", \"C\")\n        .select(\"Orders\");\nwhere the result would be an array of objects each with a single \"Orders\" property that would itself be an array of \"Order\" entities.\nComposite projections are also possible:",
                "\n    var query = new EntityQuery(\"Customers\")\n        .where(\"CompanyName\", \"startsWith\", \"C\")\n        .select(\"CompanyName, Orders\");\nAs well as projections involving nested property paths",
                "\n    var query = EntityQuery(\"Orders\")\n        .where(\"Customer.CompanyName\", \"startsWith\", \"C\")         \n        .select(\"Customer.CompanyName, Customer, OrderDate\");"
            ],
            "itemtype": "method",
            "name": "select",
            "params": [
                {
                    "name": "propertyPaths",
                    "description": "A list of property paths seperated by ','.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "EntityQuery"
            },
            "chainable": 1,
            "class": "EntityQuery",
            "module": "entityModel"
        },
        {
            "file": "entityQuery.js",
            "line": 362,
            "description": "Returns a query that skips the specified number of entities when returning results.",
            "example": [
                "\n    var query = new EntityQuery(\"Customers\")\n       .where(\"CompanyName\", \"startsWith\", \"C\")\n       .skip(5);"
            ],
            "itemtype": "method",
            "name": "skip",
            "params": [
                {
                    "name": "count",
                    "description": "The number of entities to return. If omitted this clears the",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "EntityQuery"
            },
            "chainable": 1,
            "class": "EntityQuery",
            "module": "entityModel"
        },
        {
            "file": "entityQuery.js",
            "line": 384,
            "description": "Returns a query that returns only the specified number of entities when returning results. - Same as 'take'.",
            "example": [
                "\n    var query = new EntityQuery(\"Customers\")\n        .top(5);"
            ],
            "itemtype": "method",
            "name": "top",
            "params": [
                {
                    "name": "count",
                    "description": "The number of entities to return.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "EntityQuery"
            },
            "chainable": 1,
            "class": "EntityQuery",
            "module": "entityModel"
        },
        {
            "file": "entityQuery.js",
            "line": 398,
            "description": "Returns a query that returns only the specified number of entities when returning results - Same as 'top'",
            "example": [
                "\n    var query = new EntityQuery(\"Customers\")\n        .take(5);"
            ],
            "itemtype": "method",
            "name": "take",
            "params": [
                {
                    "name": "count",
                    "description": "The number of entities to return.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "EntityQuery"
            },
            "chainable": 1,
            "class": "EntityQuery",
            "module": "entityModel"
        },
        {
            "file": "entityQuery.js",
            "line": 419,
            "description": "Returns a query that will return related entities nested within its results. The expand method allows you to identify related entities, via navigation property\nnames such that a graph of entities may be retrieved with a single request. Any filtering occurs before the results are 'expanded'.",
            "example": [
                "\n    var query = new EntityQuery(\"Customers\")\n        .where(\"CompanyName\", \"startsWith\", \"C\")\n        .expand(\"Orders\");\nwill return the filtered customers each with its \"Orders\" properties fully resolved.\nMultiple paths may be specified by separating the paths by a ','",
                "\n    var query = new EntityQuery(\"Orders\")\n        .expand(\"Customer, Employee\")\nand nested property paths my be specified as well",
                "\n    var query = new EntityQuery(\"Orders\")\n        .expand(\"Customer, OrderDetails, OrderDetails.Product\")"
            ],
            "itemtype": "method",
            "name": "expand",
            "params": [
                {
                    "name": "propertyPaths",
                    "description": "A comma-separated list of navigation property names. Each Navigation Property name can be followed\nby a '.' and another navigation property name to enable identifying a multi-level relationship",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "EntityQuery"
            },
            "chainable": 1,
            "class": "EntityQuery",
            "module": "entityModel"
        },
        {
            "file": "entityQuery.js",
            "line": 447,
            "description": "Returns a copy of this EntityQuery with the specified {{#crossLink \"EntityManager\"}}{{/crossLink}}, {{#crossLink \"MergeStrategy\"}}{{/crossLink}} \nor {{#crossLink \"FetchStrategy\"}}{{/crossLink}} applied.",
            "example": [
                "\n'using' can be used to return a new query with a specified EntityManager.",
                "\n     var em = new EntityManager(serviceName);\n     var query = new EntityQuery(\"Orders\")\n         .using(em);\nor with a specified {{#crossLink \"MergeStrategy\"}}{{/crossLink}} ",
                "\n    var em = new EntityManager(serviceName);\n    var query = new EntityQuery(\"Orders\")\n        .using(MergeStrategy.PreserveChanges);\nor with a specified {{#crossLink \"FetchStrategy\"}}{{/crossLink}} ",
                "\n    var em = new EntityManager(serviceName);\n    var query = new EntityQuery(\"Orders\")\n        .using(FetchStrategy.FromLocalCache);",
                ""
            ],
            "itemtype": "method",
            "name": "using",
            "params": [
                {
                    "name": "obj",
                    "description": "The object to update in creating a new EntityQuery from an existing one.",
                    "type": "EntityManager|MergeStrategy|FetchStrategy"
                }
            ],
            "return": {
                "description": "",
                "type": "EntityQuery"
            },
            "chainable": 1,
            "class": "EntityQuery",
            "module": "entityModel"
        },
        {
            "file": "entityQuery.js",
            "line": 474,
            "description": "Executes this query.  This method requires that an EntityManager have been previously specified via the \"using\" method.",
            "example": [
                "\nThis method can be called using a 'promises' syntax ( recommended)",
                "\n     var em = new EntityManager(serviceName);\n     var query = new EntityQuery(\"Orders\").using(em);\n     query.execute()\n       .then( function(data) {\n           ... query results processed here\n     }).fail( function(err) {\n           ... query failure processed here\n     });\nor with callbacks",
                "\n     var em = new EntityManager(serviceName);\n     var query = new EntityQuery(\"Orders\").using(em);\n     query.execute(\n        function(data) {\n           var orders = data.results;\n           ... query results processed here\n        },\n        function(err) {\n           ... query failure processed here\n        });\nEither way this method is the same as calling the EntityManager 'execute' method.",
                "\n     var em = new EntityManager(serviceName);\n     var query = new EntityQuery(\"Orders\");\n     em.executeQuery(query)\n       .then( function(data) {\n           var orders = data.results;\n           ... query results processed here\n     }).fail( function(err) {\n           ... query failure processed here\n     });"
            ],
            "itemtype": "method",
            "name": "execute",
            "async": 1,
            "params": [
                {
                    "name": "callback",
                    "description": "Function called on success.\n\n    successFunction([data])",
                    "type": "Function",
                    "props": [
                        {
                            "name": "data",
                            "description": "",
                            "type": "Object",
                            "optional": true,
                            "props": [
                                {
                                    "name": "results",
                                    "description": "",
                                    "type": "Array of Entity"
                                },
                                {
                                    "name": "query",
                                    "description": "The original query",
                                    "type": "EntityQuery"
                                }
                            ]
                        }
                    ]
                },
                {
                    "name": "errorCallback",
                    "description": "Function called on failure.\n    \n    failureFunction([error])",
                    "type": "Function",
                    "props": [
                        {
                            "name": "error",
                            "description": "Any error that occured wrapped into an Error object.",
                            "type": "Error",
                            "optional": true,
                            "props": [
                                {
                                    "name": "query",
                                    "description": "The query that caused the error.",
                                    "optional": true
                                }
                            ]
                        }
                    ]
                }
            ],
            "return": {
                "description": "",
                "type": "Promise"
            },
            "class": "EntityQuery",
            "module": "entityModel"
        },
        {
            "file": "entityQuery.js",
            "line": 530,
            "description": "Executes this query against the local cahce.  This method requires that an EntityManager have been previously specified via the \"using\" method.",
            "example": [
                "\n    // assume em is an entityManager already filled with order entities;\n    var query = new EntityQuery(\"Orders\").using(em);\n    var orders = query.executeLocally();\n\nNote that calling this method is the same as calling {{#crossLink \"EntityManager/executeQueryLocally\"}}{{/crossLink}}."
            ],
            "itemtype": "method",
            "name": "executeLocally",
            "class": "EntityQuery",
            "module": "entityModel"
        },
        {
            "file": "entityQuery.js",
            "line": 542,
            "description": "Static method tht creates an EntityQuery that will allow 'requerying' an entity or a collection of entities by primary key. This can be useful\nto force a requery of selected entities, or to restrict an existing collection of entities according to some filter.",
            "example": [
                "\n    // assuming 'customers' is an array of 'Customer' entities retrieved earlier.\n    var customersQuery = EntityQuery.fromEntities(customers);\nThe resulting query can, of course, be extended",
                "\n    // assuming 'customers' is an array of 'Customer' entities retrieved earlier.\n    var customersQuery = EntityQuery.fromEntities(customers)\n        .where(\"Region\", FilterQueryOp.NotEquals, null);\nSingle entities can requeried as well.",
                "\n    // assuming 'customer' is a 'Customer' entity retrieved earlier.\n    var customerQuery = EntityQuery.fromEntities(customer);\nwill create a query that will return an array containing a single customer entity."
            ],
            "itemtype": "method",
            "name": "fromEntities",
            "static": 1,
            "params": [
                {
                    "name": "entities",
                    "description": "The entities for which we want to create an EntityQuery.",
                    "type": "Entity|Array of Entity"
                }
            ],
            "return": {
                "description": "",
                "type": "EntityQuery"
            },
            "chainable": 1,
            "class": "EntityQuery",
            "module": "entityModel"
        },
        {
            "file": "entityQuery.js",
            "line": 583,
            "description": "Creates an EntityQuery for the specified {{#crossLink \"EntityKey\"}}{{/crossLink}}.",
            "example": [
                "\n    var empType = metadataStore.getEntityType(\"Employee\");\n    var entityKey = new EntityKey(empType, 1);\n    var query = EntityQuery.fromEntityKey(entityKey);\nor",
                "\n    // 'employee' is a previously queried employee\n    var entityKey = employee.entityAspect.getKey();\n    var query = EntityQuery.fromEntityKey(entityKey);"
            ],
            "itemtype": "method",
            "name": "fromEntityKey",
            "static": 1,
            "params": [
                {
                    "name": "entityKey",
                    "description": "The {{#crossLink \"EntityKey\"}}{{/crossLink}} for which a query will be created.",
                    "type": "EntityKey"
                }
            ],
            "return": {
                "description": "",
                "type": "EntityQuery"
            },
            "chainable": 1,
            "class": "EntityQuery",
            "module": "entityModel"
        },
        {
            "file": "entityQuery.js",
            "line": 608,
            "description": "Creates an EntityQuery for the specified entity and {{#crossLink \"NavigationProperty\"}}{{/crossLink}}.",
            "example": [
                "\n    // 'employee' is a previously queried employee\n    var ordersNavProp = employee.entityType.getProperty(\"Orders\");\n    var query = EntityQuery.fromEntityNavigation(employee, ordersNavProp);\nwill return a query for the \"Orders\" of the specified 'employee'."
            ],
            "itemtype": "method",
            "name": "fromEntityNavigation",
            "static": 1,
            "params": [
                {
                    "name": "entity",
                    "description": "The Entity whose navigation property will be queried.",
                    "type": "Entity"
                },
                {
                    "name": "navigationProperty",
                    "description": "The {{#crossLink \"NavigationProperty\"}}{{/crossLink}} to be queried.",
                    "type": "NavigationProperty"
                }
            ],
            "return": {
                "description": "",
                "type": "EntityQuery"
            },
            "chainable": 1,
            "class": "EntityQuery",
            "module": "entityModel"
        },
        {
            "file": "entityQuery.js",
            "line": 1011,
            "description": "Aliases: \"eq\", \"==\"",
            "itemtype": "property",
            "name": "Equals",
            "type": "FilterQueryOp",
            "final": 1,
            "static": 1,
            "class": "FilterQueryOp",
            "module": "entityModel"
        },
        {
            "file": "entityQuery.js",
            "line": 1018,
            "description": "Aliases: \"ne\", \"!=\"",
            "itemtype": "property",
            "name": "NotEquals",
            "type": "FilterQueryOp",
            "final": 1,
            "static": 1,
            "class": "FilterQueryOp",
            "module": "entityModel"
        },
        {
            "file": "entityQuery.js",
            "line": 1025,
            "description": "Aliases: \"gt\", \">\"",
            "itemtype": "property",
            "name": "GreaterThan",
            "type": "FilterQueryOp",
            "final": 1,
            "static": 1,
            "class": "FilterQueryOp",
            "module": "entityModel"
        },
        {
            "file": "entityQuery.js",
            "line": 1032,
            "description": "Aliases: \"lt\", \"<\"",
            "itemtype": "property",
            "name": "LessThan",
            "type": "FilterQueryOp",
            "final": 1,
            "static": 1,
            "class": "FilterQueryOp",
            "module": "entityModel"
        },
        {
            "file": "entityQuery.js",
            "line": 1039,
            "description": "Aliases: \"ge\", \">=\"",
            "itemtype": "property",
            "name": "GreaterThanOrEqual",
            "type": "FilterQueryOp",
            "final": 1,
            "static": 1,
            "class": "FilterQueryOp",
            "module": "entityModel"
        },
        {
            "file": "entityQuery.js",
            "line": 1046,
            "description": "Aliases: \"le\", \"<=\"",
            "itemtype": "property",
            "name": "LessThanOrEqual",
            "type": "FilterQueryOp",
            "final": 1,
            "static": 1,
            "class": "FilterQueryOp",
            "module": "entityModel"
        },
        {
            "file": "entityQuery.js",
            "line": 1053,
            "description": "String operation: Is a string a substring of another string.\nAliases: \"substringof\"",
            "itemtype": "property",
            "name": "Contains",
            "type": "FilterQueryOp",
            "final": 1,
            "static": 1,
            "class": "FilterQueryOp",
            "module": "entityModel"
        },
        {
            "file": "entityQuery.js",
            "line": 1061,
            "itemtype": "property",
            "name": "StartsWith",
            "type": "FilterQueryOp",
            "final": 1,
            "static": 1,
            "class": "FilterQueryOp",
            "module": "entityModel"
        },
        {
            "file": "entityQuery.js",
            "line": 1067,
            "itemtype": "property",
            "name": "EndsWith",
            "type": "FilterQueryOp",
            "final": 1,
            "static": 1,
            "class": "FilterQueryOp",
            "module": "entityModel"
        },
        {
            "file": "entityQuery.js",
            "line": 1134,
            "description": "Predicate constructor",
            "example": [
                "\n    var p1 = new Predicate(\"CompanyName\", \"StartsWith\", \"B\");\n    var query = new EntityQuery(\"Customers\").where(p1);\nor ",
                "\n    var p2 = new Predicate(\"Region\", FilterQueryOp.Equals, null);\n    var query = new EntityQuery(\"Customers\").where(p2);"
            ],
            "itemtype": "method",
            "name": "<ctor> Predicate",
            "params": [
                {
                    "name": "property",
                    "description": "A property name, a nested property name or an expression involving a property name.",
                    "type": "String"
                },
                {
                    "name": "operator",
                    "description": "",
                    "type": "FilterQueryOp|String"
                },
                {
                    "name": "value",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "Predicate",
            "module": "entityModel"
        },
        {
            "file": "entityQuery.js",
            "line": 1156,
            "description": "Returns whether an object is a Predicate",
            "example": [
                "\n    var p1 = new Predicate(\"CompanyName\", \"StartsWith\", \"B\");\n    if (Predicate.isPredicate(p1)) {\n        // do something\n    }"
            ],
            "itemtype": "method",
            "name": "isPredicate",
            "params": [
                {
                    "name": "o",
                    "description": "",
                    "type": "Object"
                }
            ],
            "static": 1,
            "class": "Predicate",
            "module": "entityModel"
        },
        {
            "file": "entityQuery.js",
            "line": 1171,
            "description": "Creates a new 'simple' Predicate.  Note that this method can also take its parameters as an array.",
            "example": [
                "\n    var p1 = Predicate.create(\"Freight\", \"gt\", 100);\nor parameters can be passed as an array.",
                "\n    var predArgs = [\"Freight\", \"gt\", 100];\n    var p1 = Predicate.create(predArgs);\nboth of these are the same as ",
                "\n    var p1 = new Predicate(\"Freight\", \"gt\", 100);"
            ],
            "itemtype": "method",
            "name": "create",
            "static": 1,
            "params": [
                {
                    "name": "property",
                    "description": "A property name, a nested property name or an expression involving a property name.",
                    "type": "String"
                },
                {
                    "name": "operator",
                    "description": "",
                    "type": "FilterQueryOp|String"
                },
                {
                    "name": "value",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "Predicate",
            "module": "entityModel"
        },
        {
            "file": "entityQuery.js",
            "line": 1196,
            "description": "Creates a 'composite' Predicate by 'and'ing a set of specified Predicates together.",
            "example": [
                "\n    var dt = new Date(88, 9, 12);\n    var p1 = Predicate.create(\"OrderDate\", \"ne\", dt);\n    var p2 = Predicate.create(\"ShipCity\", \"startsWith\", \"C\");\n    var p3 = Predicate.create(\"Freight\", \">\", 100);\n    var newPred = Predicate.and(p1, p2, p3);\nor",
                "\n    var preds = [p1, p2, p3];\n    var newPred = Predicate.and(preds);"
            ],
            "itemtype": "method",
            "name": "and",
            "params": [
                {
                    "name": "predicates",
                    "description": "",
                    "type": "Multiple Predicates|Array of Predicate",
                    "multiple": true
                }
            ],
            "static": 1,
            "class": "Predicate",
            "module": "entityModel"
        },
        {
            "file": "entityQuery.js",
            "line": 1221,
            "description": "Creates a 'composite' Predicate by 'or'ing a set of specified Predicates together.",
            "example": [
                "\n    var dt = new Date(88, 9, 12);\n    var p1 = Predicate.create(\"OrderDate\", \"ne\", dt);\n    var p2 = Predicate.create(\"ShipCity\", \"startsWith\", \"C\");\n    var p3 = Predicate.create(\"Freight\", \">\", 100);\n    var newPred = Predicate.or(p1, p2, p3);\nor",
                "\n    var preds = [p1, p2, p3];\n    var newPred = Predicate.or(preds);"
            ],
            "itemtype": "method",
            "name": "or",
            "params": [
                {
                    "name": "predicates",
                    "description": "",
                    "type": "Multiple Predicates|Array of Predicate",
                    "multiple": true
                }
            ],
            "static": 1,
            "class": "Predicate",
            "module": "entityModel"
        },
        {
            "file": "entityQuery.js",
            "line": 1246,
            "description": "Creates a 'composite' Predicate by 'negating' a specified predicate.",
            "example": [
                "\n    var p1 = Predicate.create(\"Freight\", \"gt\", 100);\n    var not_p1 = Predicate.not(p1);\nThis can also be accomplished using the 'instance' version of the 'not' method",
                "\n    var not_p1 = p1.not();\nBoth of which would be the same as",
                "\n    var not_p1 = Predicate.create(\"Freight\", \"le\", 100);"
            ],
            "itemtype": "method",
            "name": "not",
            "params": [
                {
                    "name": "predicate",
                    "description": "",
                    "type": "Predicate"
                }
            ],
            "static": 1,
            "class": "Predicate",
            "module": "entityModel"
        },
        {
            "file": "entityQuery.js",
            "line": 1265,
            "description": "'And's this Predicate with one or more other Predicates and returns a new 'composite' Predicate",
            "example": [
                "\n    var dt = new Date(88, 9, 12);\n    var p1 = Predicate.create(\"OrderDate\", \"ne\", dt);\n    var p2 = Predicate.create(\"ShipCity\", \"startsWith\", \"C\");\n    var p3 = Predicate.create(\"Freight\", \">\", 100);\n    var newPred = p1.and(p2, p3);\nor",
                "\n    var preds = [p2, p3];\n    var newPred = p1.and(preds);\nThe 'and' method is also used to write \"fluent\" expressions",
                "\n    var p4 = Predicate.create(\"ShipCity\", \"startswith\", \"F\")\n        .and(\"Size\", \"gt\", 2000);"
            ],
            "itemtype": "method",
            "name": "and",
            "params": [
                {
                    "name": "predicates",
                    "description": "",
                    "type": "Multiple Predicates|Array of Predicate",
                    "multiple": true
                }
            ],
            "class": "Predicate",
            "module": "entityModel"
        },
        {
            "file": "entityQuery.js",
            "line": 1290,
            "description": "'Or's this Predicate with one or more other Predicates and returns a new 'composite' Predicate",
            "example": [
                "\n    var dt = new Date(88, 9, 12);\n    var p1 = Predicate.create(\"OrderDate\", \"ne\", dt);\n    var p2 = Predicate.create(\"ShipCity\", \"startsWith\", \"C\");\n    var p3 = Predicate.create(\"Freight\", \">\", 100);\n    var newPred = p1.and(p2, p3);\nor",
                "\n    var preds = [p2, p3];\n    var newPred = p1.and(preds);\nThe 'or' method is also used to write \"fluent\" expressions",
                "\n    var p4 = Predicate.create(\"ShipCity\", \"startswith\", \"F\")\n        .or(\"Size\", \"gt\", 2000);"
            ],
            "itemtype": "method",
            "name": "or",
            "params": [
                {
                    "name": "predicates",
                    "description": "",
                    "type": "Multiple Predicates|Array of Predicate",
                    "multiple": true
                }
            ],
            "class": "Predicate",
            "module": "entityModel"
        },
        {
            "file": "entityQuery.js",
            "line": 1315,
            "description": "Returns the 'negated' version of this Predicate",
            "example": [
                "\n    var p1 = Predicate.create(\"Freight\", \"gt\", 100);\n    var not_p1 = p1.not();\nThis can also be accomplished using the 'static' version of the 'not' method",
                "\n    var p1 = Predicate.create(\"Freight\", \"gt\", 100);\n    var not_p1 = Predicate.not(p1);\nwhich would be the same as",
                "\n    var not_p1 = Predicate.create(\"Freight\", \"le\", 100);"
            ],
            "itemtype": "method",
            "name": "not",
            "class": "Predicate",
            "module": "entityModel"
        },
        {
            "file": "entityQuery.js",
            "line": 1335,
            "description": "Returns the function that will be used to execute this Predicate against the local cache.",
            "itemtype": "method",
            "name": "toFunction",
            "return": {
                "description": "",
                "type": "Function"
            },
            "class": "Predicate",
            "module": "entityModel"
        },
        {
            "file": "entityQuery.js",
            "line": 1341,
            "description": "Returns a human readable string for this Predicate.",
            "itemtype": "method",
            "name": "toString",
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "Predicate",
            "module": "entityModel"
        },
        {
            "file": "entityQuery.js",
            "line": 1347,
            "description": "Determines whether this Predicate is 'valid' for the specified EntityType; This method will throw an exception\nif invalid.",
            "itemtype": "method",
            "name": "validate",
            "params": [
                {
                    "name": "entityType",
                    "description": "The entityType to validate against.",
                    "type": "EntityType"
                }
            ],
            "class": "Predicate",
            "module": "entityModel"
        },
        {
            "file": "enum.js",
            "line": 55,
            "description": "Enum constructor - may be used to create new Enums.",
            "example": [
                "\n    var prototype = {\n        nextDay: function () {\n            var nextIndex = (this.dayIndex+1) % 7;\n            return DayOfWeek.getSymbols()[nextIndex];\n        }\n    };\n\n    var DayOfWeek = new Enum(\"DayOfWeek\", prototype);"
            ],
            "itemtype": "method",
            "name": "<ctor> Enum",
            "params": [
                {
                    "name": "name",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "methodObj",
                    "description": "",
                    "type": "Object",
                    "optional": true
                }
            ],
            "class": "Enum",
            "module": "core"
        },
        {
            "file": "enum.js",
            "line": 82,
            "description": "Checks if an object is an Enum 'symbol'.",
            "example": [
                "\n     if (Enum.isSymbol(DayOfWeek.Wednesday)) {\n        // do something ...\n     };"
            ],
            "itemtype": "method",
            "name": "isSymbol",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "static": 1,
            "class": "Enum",
            "module": "core"
        },
        {
            "file": "enum.js",
            "line": 96,
            "description": "Returns an Enum symbol given its name.",
            "example": [
                "\n     var dayOfWeek = DayOfWeek.from(\"Thursday\");\n     // nowdayOfWeek === DayOfWeek.Thursday            "
            ],
            "itemtype": "method",
            "name": "fromName",
            "params": [
                {
                    "name": "name",
                    "description": "Name for which an enum symbol should be returned.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The symbol that matches the name or 'undefined' if not found.",
                "type": "EnumSymbol"
            },
            "class": "Enum",
            "module": "core"
        },
        {
            "file": "enum.js",
            "line": 109,
            "description": "Adds a new symbol to an Enum.",
            "example": [
                "\n    var DayOfWeek = new Enum(\"DayOfWeek\", prototype);\n    DayOfWeek.Monday    = DayOfWeek.addSymbol( { dayIndex: 0 });"
            ],
            "itemtype": "method",
            "name": "addSymbol",
            "params": [
                {
                    "name": "propertiesObj",
                    "description": "A collection of properties that should be added to the new symbol.\nIn other words, the 'propertiesObj' is any state that should be held by the symbol.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "The new symbol",
                "type": "EnumSymbol"
            },
            "class": "Enum",
            "module": "core"
        },
        {
            "file": "enum.js",
            "line": 131,
            "description": "Seals this enum so that no more symbols may be added to it. This should only be called after all symbols\nhave already been added to the Enum.",
            "example": [
                "\n    DayOfWeek.seal();"
            ],
            "itemtype": "method",
            "name": "seal",
            "class": "Enum",
            "module": "core"
        },
        {
            "file": "enum.js",
            "line": 169,
            "description": "Returns all of the symbols contained within this Enum.",
            "example": [
                "\n    var symbols = DayOfWeek.getSymbols();"
            ],
            "itemtype": "method",
            "name": "getSymbols",
            "return": {
                "description": "All of the symbols contained within this Enum.",
                "type": "Array of EnumSymbol"
            },
            "class": "Enum",
            "module": "core"
        },
        {
            "file": "enum.js",
            "line": 182,
            "description": "Returns the names of all of the symbols contained within this Enum.",
            "example": [
                "\n    var symbols = DayOfWeek.getNames();"
            ],
            "itemtype": "method",
            "name": "getNames",
            "return": {
                "description": "All of the names of the symbols contained within this Enum.",
                "type": "Array of String"
            },
            "class": "Enum",
            "module": "core"
        },
        {
            "file": "enum.js",
            "line": 195,
            "description": "Returns whether an Enum contains a specified symbol.",
            "example": [
                "\n    var symbol = DayOfWeek.Friday;\n    if (DayOfWeek.contains(symbol)) {\n        // do something\n    }"
            ],
            "itemtype": "method",
            "name": "contains",
            "params": [
                {
                    "name": "Object",
                    "description": "or symbol to test.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Whether this Enum contains the specified symbol.",
                "type": "Boolean"
            },
            "class": "Enum",
            "module": "core"
        },
        {
            "file": "enum.js",
            "line": 224,
            "description": "The {{#crossLink \"Enum\"}}{{/crossLink}} to which this symbol belongs.\n__readOnly__",
            "itemtype": "property",
            "name": "parentEnum",
            "type": "Enum",
            "class": "EnumSymbol",
            "module": "core"
        },
        {
            "file": "enum.js",
            "line": 230,
            "description": "Returns the name of this symbol.",
            "example": [
                "\n    var name = DayOfWeek.Monday.getName();\n    // name === \"Monday\""
            ],
            "itemtype": "method",
            "name": "getName",
            "class": "EnumSymbol",
            "module": "core"
        },
        {
            "file": "enum.js",
            "line": 247,
            "description": "Same as the getName method. Returns the name of this symbol.",
            "example": [
                "\n    var name = DayOfWeek.Monday.toString();\n    // name === \"Monday\""
            ],
            "itemtype": "method",
            "name": "toString",
            "class": "EnumSymbol",
            "module": "core"
        },
        {
            "file": "event.js",
            "line": 19,
            "description": "Constructor for an Event",
            "example": [
                "\n    salaryEvent = new Event(\"salaryEvent\", person);"
            ],
            "itemtype": "method",
            "name": "<ctor> Event",
            "params": [
                {
                    "name": "name",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "publisher",
                    "description": "The object that will be doing the publication. i.e. the object to which this event is attached.",
                    "type": "Object"
                },
                {
                    "name": "defaultErrorCallback",
                    "description": "If omitted then subscriber notification failures will be ignored.\n\nerrorCallback([e])",
                    "type": "Function",
                    "optional": true,
                    "props": [
                        {
                            "name": "e",
                            "description": "Any error encountered during subscription execution.",
                            "type": "Error",
                            "optional": true
                        }
                    ]
                }
            ],
            "class": "Event",
            "module": "core"
        },
        {
            "file": "event.js",
            "line": 44,
            "description": "Publish data for this event.",
            "example": [
                "\n    // Assume 'salaryEvent' is previously constructed Event\n    salaryEvent.publish( { eventType: \"payRaise\", amount: 100 });\nThis event can also be published asychonously",
                "\n    salaryEvent.publish( { eventType: \"payRaise\", amount: 100 }, true);\nAnd we can add a handler in case the subscriber 'mishandles' the event.",
                "\n    salaryEvent.publish( { eventType: \"payRaise\", amount: 100 }, true, function(error) {\n        // do something with the 'error' object\n    });"
            ],
            "itemtype": "method",
            "name": "publish",
            "params": [
                {
                    "name": "data",
                    "description": "Data to publish",
                    "type": "Object"
                },
                {
                    "name": "publishAsync",
                    "description": "Whether to publish asynchonously or not.",
                    "optional": true,
                    "optdefault": "false"
                },
                {
                    "name": "errorCallback",
                    "description": "Will be called for any errors that occur during publication. If omitted, \nerrors will be eaten.\n\nerrorCallback([e])",
                    "type": "Function",
                    "optional": true,
                    "props": [
                        {
                            "name": "e",
                            "description": "Any error encountered during publication execution.",
                            "type": "Error",
                            "optional": true
                        }
                    ]
                }
            ],
            "class": "Event",
            "module": "core"
        },
        {
            "file": "event.js",
            "line": 99,
            "description": "Publish data for this event asynchronously.",
            "example": [
                "\n    // Assume 'salaryEvent' is previously constructed Event\n    salaryEvent.publishAsync( { eventType: \"payRaise\", amount: 100 });\nAnd we can add a handler in case the subscriber 'mishandles' the event.",
                "\n    salaryEvent.publishAsync( { eventType: \"payRaise\", amount: 100 }, function(error) {\n        // do something with the 'error' object\n    });"
            ],
            "itemtype": "method",
            "name": "publishAsync",
            "params": [
                {
                    "name": "data",
                    "description": "Data to publish",
                    "type": "Object"
                },
                {
                    "name": "errorCallback",
                    "description": "Will be called for any errors that occur during publication. If omitted, \nerrors will be eaten.\n\nerrorCallback([e])",
                    "type": "Function",
                    "optional": true,
                    "props": [
                        {
                            "name": "e",
                            "description": "Any error encountered during publication execution.",
                            "type": "Error",
                            "optional": true
                        }
                    ]
                }
            ],
            "class": "Event",
            "module": "core"
        },
        {
            "file": "event.js",
            "line": 121,
            "description": "Subscribe to this event.",
            "example": [
                "\n    // Assume 'salaryEvent' is previously constructed Event\n    salaryEvent.subscribe(function (eventArgs) {\n        if (eventArgs.eventType === \"payRaise\") {\n           // do something\n        }\n    });\nThere are several built in Breeze events, such as EntityAspect.propertyChanged, EntityAspect.validationErrorsChanged as well.",
                "\n     // Assume order is a preexisting 'order' entity\n     order.entityAspect.propertyChanged.subscribe(function (pcEvent) {\n         if ( pcEvent.propertyName === \"OrderDate\") {\n             // do something\n         }\n     });"
            ],
            "itemtype": "method",
            "name": "subscribe",
            "params": [
                {
                    "name": "callback",
                    "description": "Will be called whenever 'data' is published for this event. \n\n    callback([data])",
                    "type": "Function",
                    "optional": true,
                    "props": [
                        {
                            "name": "data",
                            "description": "Whatever 'data' was published.  This should be documented on the specific event.",
                            "type": "Object",
                            "optional": true
                        }
                    ]
                }
            ],
            "return": {
                "description": "This is a key for 'unsubscription'.  It can be passed to the 'unsubscribe' method.",
                "type": "Number"
            },
            "class": "Event",
            "module": "core"
        },
        {
            "file": "event.js",
            "line": 156,
            "description": "Unsubscribe from this event.",
            "example": [
                "\n    // Assume order is a preexisting 'order' entity\n    var token = order.entityAspect.propertyChanged.subscribe(function (pcEvent) {\n            // do something\n    });\n    // sometime later\n    order.entityAspect.propertyChanged.unsubscribe(token);"
            ],
            "itemtype": "method",
            "name": "unsubscribe",
            "params": [
                {
                    "name": "unsubKey",
                    "description": "The value returned from the 'subscribe' method may be used to unsubscribe here.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Whether unsubscription occured. This will return false if already unsubscribed or if the key simply\ncannot be found.",
                "type": "Boolean"
            },
            "class": "Event",
            "module": "core"
        },
        {
            "file": "event.js",
            "line": 192,
            "description": "Enables or disables the named event for an object and all of its children.",
            "example": [
                "\n    Event.enable(“propertyChanged”, myEntityManager, false) \nwill disable all EntityAspect.propertyChanged events within a EntityManager.",
                "\n    Event.enable(“propertyChanged”, myEntityManager, true) \nwill enable all EntityAspect.propertyChanged events within a EntityManager.",
                "\n    Event.enable(“propertyChanged”, myEntity.entityAspect, false) \nwill disable EntityAspect.propertyChanged events for a specific entity.",
                "\n    Event.enable(“propertyChanged”, myEntity.entityAspect, null) \nwill removes any enabling / disabling at the entity aspect level so now any 'Event.enable' calls at the EntityManager level, \nmade either previously or in the future, will control notification.",
                "\n    Event.enable(“validationErrorsChanged”, myEntityManager, function(em) {     \n       return em.customTag === “blue”;\n    })                 \nwill either enable or disable myEntityManager based on the current value of a ‘customTag’ property on myEntityManager. \nNote that this is dynamic, changing the customTag value will cause events to be enabled or disabled immediately."
            ],
            "itemtype": "method",
            "name": "enable",
            "static": 1,
            "params": [
                {
                    "name": "eventName",
                    "description": "The name of the event.",
                    "type": "String"
                },
                {
                    "name": "target",
                    "description": "The object at which enabling or disabling will occur.  All event notifications that occur to this object or \nchildren of this object will be enabled or disabled.",
                    "type": "Object"
                },
                {
                    "name": "isEnabled",
                    "description": "A boolean, a null or a function that returns either a boolean or a null.",
                    "type": "Boolean|null|Function"
                }
            ],
            "class": "Event",
            "module": "core"
        },
        {
            "file": "event.js",
            "line": 231,
            "description": "Returns whether for a specific event and a specific object and its children, notification is enabled or disabled or not set.",
            "example": [
                "\n    Event.isEnabled(“propertyChanged”, myEntityManager) "
            ],
            "itemtype": "method",
            "name": "isEnabled",
            "static": 1,
            "params": [
                {
                    "name": "eventName",
                    "description": "The name of the event.",
                    "type": "String"
                },
                {
                    "name": "target",
                    "description": "The object for which we want to know if notifications are enabled.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "A null is returned if this value has not been set.",
                "type": "Boolean|null"
            },
            "class": "Event",
            "module": "core"
        },
        {
            "file": "keyGeneratorInterface.js",
            "line": 32,
            "description": "Returns a unique 'temporary' key for the specified {{#crossLink \"EntityType\"}}{{/crossLink}}. \nUniqueness is defined for this purpose as being unique within this KeyGenerator. This is sufficient \nbecause each EntityManager will have its own instance of a KeyGenerator and any entities imported into\nthe EntityManager with temporary keys will have them regenerated and remapped on import.",
            "itemtype": "method",
            "name": "generateTempKeyValue",
            "params": [
                {
                    "name": "entityType",
                    "description": "",
                    "type": "EntityType"
                }
            ],
            "class": "ↈ_keyGenerator_interface",
            "module": "entityModel"
        },
        {
            "file": "promise.js",
            "line": 10,
            "description": "Used to handle the sucessfull return of data from a promise",
            "itemtype": "method",
            "name": "then",
            "params": [
                {
                    "name": "callback",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "Promise",
            "module": "entityModel"
        },
        {
            "file": "promise.js",
            "line": 17,
            "description": "Used to handle any errors encountered wheh processing the promise.",
            "itemtype": "method",
            "name": "fail",
            "params": [
                {
                    "name": "errorCallback",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "Promise",
            "module": "entityModel"
        },
        {
            "file": "promise.js",
            "line": 24,
            "description": "A callback that is called regardless of the success or failure of the promise.",
            "itemtype": "method",
            "name": "fin",
            "params": [
                {
                    "name": "finallyCallback",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "Promise",
            "module": "entityModel"
        },
        {
            "file": "relationArray.js",
            "line": 20,
            "description": "An {{#crossLink \"Event\"}}{{/crossLink}} that fires whenever the contents of this array changed.  This event\nis fired any time a new entity is attached or added to the EntityManager and happens to belong to this collection.\nAdds that occur as a result of query or import operations are batched so that all of the adds or removes to any individual\ncollections are collected into a single notification event for each relation array.",
            "example": [
                "\n    // assume order is an order entity attached to an EntityManager.\n    orders.arrayChanged.subscribe(\n        function (arrayChangedArgs) {\n            var addedEntities = arrayChangedArgs.added;\n            var removedEntities = arrayChanged.removed;\n        });"
            ],
            "itemtype": "event",
            "name": "arrayChanged",
            "params": [
                {
                    "name": "added",
                    "description": "An array of all of the entities added to this collection.",
                    "type": "Array of Entity"
                },
                {
                    "name": "removed",
                    "description": "An array of all of the removed from this collection.",
                    "type": "Array of Entity"
                }
            ],
            "readonly": "",
            "class": "ↈ_relationArray_",
            "module": "entityModel"
        },
        {
            "file": "relationArray.js",
            "line": 89,
            "description": "Performs an asynchronous load of all other the entities associated with this relationArray.",
            "example": [
                "\n    // assume orders is an empty, as yet unpopulated, relation array of orders\n    // associated with a specific customer.\n    orders.load().then(...)"
            ],
            "itemtype": "method",
            "name": "load",
            "params": [
                {
                    "name": "callback",
                    "description": "",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "errorCallback",
                    "description": "",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "Promise"
            },
            "class": "ↈ_relationArray_",
            "module": "entityModel"
        },
        {
            "file": "validate.js",
            "line": 47,
            "description": "Validator constructor - This method is used to create create custom validations.  Several\nbasic \"Validator\" construction methods are also provided as static methods to this class. These methods\nprovide a simpler syntax for creating basic validations.\n\nHowever, sometimes a custom validator will be required.",
            "example": [
                "\nMost validators will be 'property' level validators, like this.",
                "\n    // v is this function is the value to be validated, in this case a \"country\" string.\n    var valFn = function (v) {\n        if (v == null) return true;\n        return (core.stringStartsWith(v, \"US\"));\n    };\n    var countryValidator = new Validator(\"countryIsUS\", valFn, { \n        displayName: \"Country\", \n        messageTemplate: \"'%displayName%' must start with 'US'\" \n    });\n\n    // Now plug it into Breeze.\n    // Assume em1 is a preexisting EntityManager.\n    var custType = metadataStore.getEntityType(\"Customer\");\n    var countryProp = custType.getProperty(\"Country\");\n    // Note that validator is added to a 'DataProperty' validators collection.\n    prop.validators.push(countryValidator);\nEntity level validators are also possible",
                "\n    function isValidZipCode(value) {\n        var re = /^\\d{5}([\\-]\\d{4})?$/;\n        return (re.test(value));\n    }               \n   \n    // v in this case will be a Customer entity\n    var valFn = function (v) {\n        // This validator only validates US Zip Codes.\n        if ( v.getProperty(\"Country\") === \"USA\") {\n            var postalCode = v.getProperty(\"PostalCode\");\n            return isValidZipCode(postalCode);\n        }\n        return true;\n    };\n    var zipCodeValidator = new Validator(\"zipCodeValidator\", valFn, \n        { messageTemplate: \"For the US, this is not a valid PostalCode\" });\n\n    // Now plug it into Breeze.\n    // Assume em1 is a preexisting EntityManager.\n    var custType = em1.metadataStore.getEntityType(\"Customer\");\n    // Note that validator is added to an 'EntityType' validators collection.\n    custType.validators.push(zipCodeValidator);\nWhat is commonly needed is a way of creating a parameterized function that will itself\nreturn a new Validator.  This requires the use of a 'context' object.",
                "\n    // create a function that will take in a config object\n    // and will return a validator\n    var numericRangeValidator = function(context) {\n        var valFn = function(v, ctx) {\n            if (v == null) return true;\n            if (typeof(v) !== \"number\") return false;\n            if (ctx.min != null && v < ctx.min) return false;\n            if (ctx.max != null && v > ctx.max) return false;\n            return true;\n        };\n        // The last parameter below is the 'context' object that will be passed into the 'ctx' parameter above\n        // when this validator executes. Several other properties, such as displayName will get added to this object as well.\n        return new Validator(\"numericRange\", valFn, {\n            messageTemplate: \"'%displayName%' must be an integer between the values of %min% and %max%\",\n            min: context.min,\n            max: context.max\n        });\n    };\n    // Assume that freightProperty is a DataEntityProperty that describes numeric values.\n    // register the validator\n    freightProperty.validators.push(numericRangeValidator({ min: 100, max: 500 }));"
            ],
            "itemtype": "method",
            "name": "<ctor> Validator",
            "params": [
                {
                    "name": "name",
                    "description": "The name of this validator.",
                    "type": "String"
                },
                {
                    "name": "validatorFn",
                    "description": "A function to perform validation.\n    \nvalidatorFn(value, context)",
                    "type": "Function",
                    "props": [
                        {
                            "name": "value",
                            "description": "Value to be validated",
                            "type": "Object"
                        },
                        {
                            "name": "context",
                            "description": "The same context object passed into the constructor with the following additonal properties if not \notherwise specified.",
                            "type": "Object",
                            "props": [
                                {
                                    "name": "value",
                                    "description": "The value being validated.",
                                    "type": "Object"
                                },
                                {
                                    "name": "validatorName",
                                    "description": "The name of the validator being executed.",
                                    "type": "String"
                                },
                                {
                                    "name": "displayName",
                                    "description": "This will be either the value of the property's 'displayName' property or\nthe value of its 'name' property or the string 'Value'",
                                    "type": "String"
                                },
                                {
                                    "name": "messageTemplate",
                                    "description": "This will either be the value of Validator.messageTemplates[ {this validators name}] or null. Validator.messageTemplates\nis an object that is keyed by validator name and that can be added to in order to 'register' your own message for a given validator. \nThe following property can also be specified for any validator to force a specific errorMessage string",
                                    "type": "String"
                                },
                                {
                                    "name": "message",
                                    "description": "If this property is set it will be used instead of the 'messageTemplate' property when an\nerror message is generated.",
                                    "type": "String",
                                    "optional": true
                                }
                            ]
                        }
                    ]
                },
                {
                    "name": "context",
                    "description": "A free form object whose properties will made available during the validation and error message creation process.\nThis object will be passed into the Validator's validation function whenever 'validate' is called. See above for a description\nof additional properties that will be automatically added to this object if not otherwise specified.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "class": "Validator",
            "module": "entityModel"
        },
        {
            "file": "validate.js",
            "line": 155,
            "description": "Run this validator against the specified value.  This method will usually be called internally either\nautomatically by an property change, entity attach, query or save operation, or manually as a result of\na validateEntity call on the EntityAspect. The resulting ValidationResults are available via the \nEntityAspect.getValidationErrors method.\n\nHowever, you can also call a validator directly either for testing purposes or some other reason if needed.",
            "example": [
                "\n    // using one of the predefined validators\n    var validator = Validator.maxLength({ maxLength: 5, displayName: \"City\" });\n    // should be ok because \"asdf\".length < 5\n    var result = validator.validate(\"asdf\");\n    ok(result === null);\n    result = validator.validate(\"adasdfasdf\");\n    // extract all of the properties of the 'result'\n    var errMsg = result.errorMessage;\n    var context = result.context;\n    var sameValidator = result.validator;"
            ],
            "itemtype": "method",
            "name": "validate",
            "params": [
                {
                    "name": "value",
                    "description": "Value to validate",
                    "type": "Object"
                },
                {
                    "name": "additionalContext",
                    "description": "Any additional contextual information that the Validator\ncan make use of.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "A ValidationError if validation fails, null otherwise",
                "type": "ValidationError|null"
            },
            "class": "Validator",
            "module": "entityModel"
        },
        {
            "file": "validate.js",
            "line": 201,
            "description": "Returns the message generated by the most recent execution of this Validator.",
            "example": [
                "\n    var v0 = Validator.maxLength({ maxLength: 5, displayName: \"City\" });\n    v0.validate(\"adasdfasdf\");\n    var errMessage = v0.getMessage());"
            ],
            "itemtype": "method",
            "name": "getMessage",
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "Validator",
            "module": "entityModel"
        },
        {
            "file": "validate.js",
            "line": 243,
            "description": "Map of standard error message templates keyed by validator name.\nYou can add to or modify this object to customize the template used for any validation error message.",
            "example": [
                "\n    // v is this function is the value to be validated, in this case a \"country\" string.\n    var valFn = function (v) {\n        if (v == null) return true;\n        return (core.stringStartsWith(v, \"US\"));\n    };\n    var countryValidator = new Validator(\"countryIsUS\", valFn, { displayName: \"Country\" }); \n    Validator.messageTemplates[\"countryIsUS\", \"'%displayName%' must start with 'US'\");\nThis will have a similar effect to this\n     var countryValidator = new Validator(\"countryIsUS\", valFn, { \n        displayName: \"Country\", \n        messageTemplate: \"'%displayName%' must start with 'US'\" \n    });"
            ],
            "itemtype": "property",
            "name": "messageTemplates",
            "type": "Object",
            "static": 1,
            "class": "Validator",
            "module": "entityModel"
        },
        {
            "file": "validate.js",
            "line": 275,
            "description": "Returns a standard 'required value' Validator",
            "example": [
                "\n    // Assume em1 is a preexisting EntityManager.\n    var custType = em1.metadataStore.getEntityType(\"Customer\");\n    var regionProperty - custType.getProperty(\"Region\");\n    // Makes \"Region\" on Customer a required property.\n    regionProperty.validators.push(Validator.required());"
            ],
            "itemtype": "method",
            "name": "required",
            "static": 1,
            "return": {
                "description": "A new Validator",
                "type": "Validator"
            },
            "class": "Validator",
            "module": "entityModel"
        },
        {
            "file": "validate.js",
            "line": 299,
            "description": "Returns a standard maximum string length Validator; the maximum length must be specified",
            "example": [
                "\n    // Assume em1 is a preexisting EntityManager.\n    var custType = em1.metadataStore.getEntityType(\"Customer\");\n    var regionProperty - custType.getProperty(\"Region\");\n    // Validates that the value of the Region property on Customer will be less than or equal to 5 characters.\n    regionProperty.validators.push(Validator.maxLength( {maxLength: 5}));"
            ],
            "itemtype": "method",
            "name": "maxLength",
            "static": 1,
            "params": [
                {
                    "name": "context",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "maxLength",
                            "description": "",
                            "type": "Integer"
                        }
                    ]
                }
            ],
            "return": {
                "description": "A new Validator",
                "type": "Validator"
            },
            "class": "Validator",
            "module": "entityModel"
        },
        {
            "file": "validate.js",
            "line": 322,
            "description": "Returns a standard maximum string length Validator; both minimum and maximum lengths must be specified.",
            "example": [
                "\n    // Assume em1 is a preexisting EntityManager.\n    var custType = em1.metadataStore.getEntityType(\"Customer\");\n    var regionProperty - custType.getProperty(\"Region\");\n    // Validates that the value of the Region property on Customer will be \n    // between 2 and 5 characters\n    regionProperty.validators.push(Validator.stringLength( {minLength: 2, maxLength: 5});"
            ],
            "itemtype": "method",
            "name": "stringLength",
            "static": 1,
            "params": [
                {
                    "name": "context",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "maxLength",
                            "description": "",
                            "type": "Integer"
                        },
                        {
                            "name": "minLength",
                            "description": "",
                            "type": "Integer"
                        }
                    ]
                }
            ],
            "return": {
                "description": "A new Validator",
                "type": "Validator"
            },
            "class": "Validator",
            "module": "entityModel"
        },
        {
            "file": "validate.js",
            "line": 349,
            "description": "Returns a standard string dataType Validator.",
            "example": [
                "\n    // Assume em1 is a preexisting EntityManager.\n    var custType = em1.metadataStore.getEntityType(\"Customer\");\n    var regionProperty - custType.getProperty(\"Region\");\n    // Validates that the value of the Region property on Customer is a string.\n    regionProperty.validators.push(Validator.string());"
            ],
            "itemtype": "method",
            "name": "string",
            "static": 1,
            "return": {
                "description": "A new Validator",
                "type": "Validator"
            },
            "class": "Validator",
            "module": "entityModel"
        },
        {
            "file": "validate.js",
            "line": 369,
            "description": "Returns a standard string data type Validator.",
            "example": [
                "\n    // Assume em1 is a preexisting EntityManager.\n    var custType = em1.metadataStore.getEntityType(\"Customer\");\n    var customerIdProperty - custType.getProperty(\"CustomerID\");\n    // Validates that the value of the CustomerID property on Customer is a Guid.\n    customerIdProperty.validators.push(Validator.guid());"
            ],
            "itemtype": "method",
            "name": "guid",
            "static": 1,
            "return": {
                "description": "A new Validator",
                "type": "Validator"
            },
            "class": "Validator",
            "module": "entityModel"
        },
        {
            "file": "validate.js",
            "line": 389,
            "description": "Returns a standard numeric data type Validator.",
            "example": [
                "\n    // Assume em1 is a preexisting EntityManager.\n    var orderType = em1.metadataStore.getEntityType(\"Order\");\n    var freightProperty - orderType.getProperty(\"Freight\");\n    // Validates that the value of the Freight property on Order is a number.\n    freightProperty.validators.push(Validator.number());"
            ],
            "itemtype": "method",
            "name": "number",
            "static": 1,
            "return": {
                "description": "A new Validator",
                "type": "Validator"
            },
            "class": "Validator",
            "module": "entityModel"
        },
        {
            "file": "validate.js",
            "line": 414,
            "description": "Returns a standard large integer data type - 64 bit - Validator.",
            "example": [
                "\n    // Assume em1 is a preexisting EntityManager.\n    var orderType = em1.metadataStore.getEntityType(\"Order\");\n    var freightProperty - orderType.getProperty(\"Freight\");\n    // Validates that the value of the Freight property on Order is within the range of a 64 bit integer.\n    freightProperty.validators.push(Validator.int64());"
            ],
            "itemtype": "method",
            "name": "int64",
            "static": 1,
            "return": {
                "description": "A new Validator",
                "type": "Validator"
            },
            "class": "Validator",
            "module": "entityModel"
        },
        {
            "file": "validate.js",
            "line": 437,
            "description": "Returns a standard 32 bit integer data type Validator.",
            "example": [
                "\n    // Assume em1 is a preexisting EntityManager.\n    var orderType = em1.metadataStore.getEntityType(\"Order\");\n    var freightProperty - orderType.getProperty(\"Freight\");\n    freightProperty.validators.push(Validator.int32());"
            ],
            "itemtype": "method",
            "name": "int32",
            "static": 1,
            "return": {
                "description": "A new Validator",
                "type": "Validator"
            },
            "class": "Validator",
            "module": "entityModel"
        },
        {
            "file": "validate.js",
            "line": 452,
            "description": "Returns a standard 16 bit integer data type Validator.",
            "example": [
                "\n    // Assume em1 is a preexisting EntityManager.\n    var orderType = em1.metadataStore.getEntityType(\"Order\");\n    var freightProperty - orderType.getProperty(\"Freight\");\n    // Validates that the value of the Freight property on Order is within the range of a 16 bit integer.\n    freightProperty.validators.push(Validator.int16());"
            ],
            "itemtype": "method",
            "name": "int16",
            "static": 1,
            "return": {
                "description": "A new Validator",
                "type": "Validator"
            },
            "class": "Validator",
            "module": "entityModel"
        },
        {
            "file": "validate.js",
            "line": 468,
            "description": "Returns a standard byte data type Validator. (This is a integer between 0 and 255 inclusive for js purposes).",
            "example": [
                "\n    // Assume em1 is a preexisting EntityManager.\n    var orderType = em1.metadataStore.getEntityType(\"Order\");\n    var freightProperty - orderType.getProperty(\"Freight\");\n    // Validates that the value of the Freight property on Order is within the range of a 16 bit integer.\n    // Probably not a very good validation to place on the Freight property.\n    regionProperty.validators.push(Validator.byte());"
            ],
            "itemtype": "method",
            "name": "byte",
            "static": 1,
            "return": {
                "description": "A new Validator",
                "type": "Validator"
            },
            "class": "Validator",
            "module": "entityModel"
        },
        {
            "file": "validate.js",
            "line": 485,
            "description": "Returns a standard boolean data type Validator.",
            "example": [
                "\n    // Assume em1 is a preexisting EntityManager.\n    var productType = em1.metadataStore.getEntityType(\"Product\");\n    var discontinuedProperty - productType.getProperty(\"Discontinued\");\n    // Validates that the value of the Discontinued property on Product is a boolean\n    discontinuedProperty.validators.push(Validator.bool());"
            ],
            "itemtype": "method",
            "name": "bool",
            "static": 1,
            "return": {
                "description": "A new Validator",
                "type": "Validator"
            },
            "class": "Validator",
            "module": "entityModel"
        },
        {
            "file": "validate.js",
            "line": 512,
            "description": "Returns a standard date data type Validator.",
            "example": [
                "\n    // Assume em1 is a preexisting EntityManager.\n    var orderType = em1.metadataStore.getEntityType(\"Order\");\n    var orderDateProperty - orderType.getProperty(\"OrderDate\");\n    // Validates that the value of the OrderDate property on Order is a date\n    // Probably not a very good validation to place on the Freight property.\n    orderDateProperty.validators.push(Validator.date());"
            ],
            "itemtype": "method",
            "name": "date",
            "static": 1,
            "return": {
                "description": "A new Validator",
                "type": "Validator"
            },
            "class": "Validator",
            "module": "entityModel"
        },
        {
            "file": "validate.js",
            "line": 615,
            "itemtype": "method",
            "name": "<ctor> ValidationError",
            "params": [
                {
                    "name": "validator",
                    "description": "",
                    "type": "Validator"
                },
                {
                    "name": "context",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "errorMessage",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "ValidationError",
            "module": "entityModel"
        },
        {
            "file": "validate.js",
            "line": 631,
            "description": "The Validator associated with this ValidationError.\n\n__readOnly__",
            "itemtype": "property",
            "name": "validator",
            "type": "Validator",
            "class": "ValidationError",
            "module": "entityModel"
        },
        {
            "file": "validate.js",
            "line": 638,
            "description": "A 'context' object associated with this ValidationError.\n\n__readOnly__",
            "itemtype": "property",
            "name": "context",
            "type": "Object",
            "class": "ValidationError",
            "module": "entityModel"
        },
        {
            "file": "validate.js",
            "line": 645,
            "description": "The DataProperty or NavigationProperty associated with this ValidationError.\n\n__readOnly__",
            "itemtype": "property",
            "name": "property",
            "type": "DataProperty|NavigationProperty",
            "class": "ValidationError",
            "module": "entityModel"
        },
        {
            "file": "validate.js",
            "line": 652,
            "description": "The error message associated with the ValidationError.\n\n__readOnly__",
            "itemtype": "property",
            "name": "errorMessage",
            "type": "String",
            "class": "ValidationError",
            "module": "entityModel"
        }
    ]
}